// Implementation file for parser generated by fsyacc
#light "off"
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\..\text\parser.fsy"

open Source
open Types
open Ast
open Operators
open Script
(*F#
open FSharp.Compatibility.OCaml 
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing
F#*)

(* Error handling *)

let error at msg = raise (Script.Syntax (at, msg))

let parse_error msg =
  error Source.no_region
    (if msg = "syntax error" then "unexpected token" else msg)


(* Position handling *)

let position_to_pos position =
  { file = position.pos_fname;
    line = position.pos_lnum;
    column = position.pos_cnum - position.pos_bol
  }

let positions_to_region position1 position2 =
  { left = position_to_pos position1;
    right = position_to_pos position2
  }

let at () =
  positions_to_region (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
let ati i =
  positions_to_region (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)


(* Literals *)

let literal f s =
  try f s with Failure _ -> error s.at "constant out of range"

let nat s at =
  try
    let n = int_of_string s in
    if n >= 0 then n else raise (Failure "")
  with Failure _ -> error at "integer constant out of range"

let nat32 s at =
  try I32.of_string_u s with Failure _ -> error at "i32 constant out of range"

let name s at =
  try Utf8.decode s with Utf8.Utf8 -> error at "invalid UTF-8 encoding"


(* Symbolic variables *)

(*IF-OCAML*)
module VarMap = Map.Make(String)
(*ENDIF-OCAML*)
(*F#
module VarMap = 
struct
	type 'a t = FSharp.Collections.Map<string,'a>
	let empty = FSharp.Collections.Map.empty
	let find x m = FSharp.Collections.Map.find x m
	let add x y m =  FSharp.Collections.Map.add x y m
	let map f m = FSharp.Collections.Map.map (fun x y -> f y) m
end
F#*)

type space = {mutable map : int32 VarMap.t; mutable count : int32}
let empty () = {map = VarMap.empty; count = 0l}

type types = {space : space; mutable list : type_ list}
let empty_types () = {space = empty (); list = []}

type context =
  { types : types; tables : space; memories : space;
    funcs : space; locals : space; globals : space; labels : int32 VarMap.t }

let empty_context () =
  { types = empty_types (); tables = empty (); memories = empty ();
    funcs = empty (); locals = empty (); globals = empty ();
    labels = VarMap.empty }

let enter_func (c : context) =
  {c with labels = VarMap.empty; locals = empty ()}

let lookup category space x =
  try VarMap.find x.it space.map
  with Not_found -> error x.at ("unknown " ^ category ^ " " ^ x.it)

let type_ (c : context) x = lookup "type" c.types.space x
let func (c : context) x = lookup "function" c.funcs x
let local (c : context) x = lookup "local" c.locals x
let ``global`` (c : context) x = lookup "global" c.globals x
let table (c : context) x = lookup "table" c.tables x
let memory (c : context) x = lookup "memory" c.memories x
let label (c : context) x =
  try VarMap.find x.it c.labels
  with Not_found -> error x.at ("unknown label " ^ x.it)

let func_type (c : context) x =
  try (Lib.List32.nth c.types.list x.it).it
  with Failure _ -> error x.at ("unknown type " ^ Int32.to_string x.it)


let bind category space x =
  if VarMap.mem x.it space.map then
    error x.at ("duplicate " ^ category ^ " " ^ x.it);
  let i = space.count in
  space.map <- VarMap.add x.it space.count space.map;
  space.count <- Int32.add space.count 1l;
  if space.count = 0l then 
    error x.at ("too many " ^ category ^ " bindings");
  i

let bind_type (c : context) x ty =
  c.types.list <- c.types.list @ [ty];
  bind "type" c.types.space x
let bind_func (c : context) x = bind "function" c.funcs x
let bind_local (c : context) x = bind "local" c.locals x
let bind_global (c : context) x = bind "global" c.globals x
let bind_table (c : context) x = bind "table" c.tables x
let bind_memory (c : context) x = bind "memory" c.memories x
let bind_label (c : context) x =
  {c with labels = VarMap.add x.it 0l (VarMap.map (Int32.add 1l) c.labels)}

let anon category space n =
  let i = space.count in
  space.count <- Int32.add space.count n;
  if I32.lt_u space.count n then
    error no_region ("too many " ^ category ^ " bindings");
  i

let anon_type (c : context) ty =
  c.types.list <- c.types.list @ [ty];
  anon "type" c.types.space 1l
let anon_func (c : context) = anon "function" c.funcs 1l
let anon_locals (c : context) ts =
  ignore (anon "local" c.locals (Lib.List32.length ts))
let anon_global (c : context) = anon "global" c.globals 1l
let anon_table (c : context) = anon "table" c.tables 1l
let anon_memory (c : context) = anon "memory" c.memories 1l
let anon_label (c : context) =
  {c with labels = VarMap.map (Int32.add 1l) c.labels}

let inline_type (c : context) ft at =
  match Lib.List.index_where (fun ty -> ty.it = ft) c.types.list with
  | Some i -> Int32.of_int i @@ at
  | None -> anon_type c (ft @@ at) @@ at

let inline_type_explicit (c : context) x ft at =
  if ft <> FuncType ([], []) && ft <> func_type c x then
    error at "inline function type does not match explicit type";
  x

type CONSTtoken = string Source.phrase -> Ast.instr' * Values.value
type LOADToken = int option -> Memory.offset -> Ast.instr'
type SAVEToken = int option -> Memory.offset -> Ast.instr'

# 173 "Parser.ml"
// This type is the type of tokens accepted by the parser
type token = 
  | ALIGN_EQ_NAT of (string)
  | OFFSET_EQ_NAT of (string)
  | STORE of (SAVEToken)
  | LOAD of (LOADToken)
  | CONVERT of (Ast.instr')
  | COMPARE of (Ast.instr')
  | TEST of (Ast.instr')
  | BINARY of (Ast.instr')
  | UNARY of (Ast.instr')
  | CONST of (CONSTtoken)
  | VALUE_TYPE of (Types.value_type)
  | VAR of (string)
  | STRING of (string)
  | FLOAT of (string)
  | INT of (string)
  | NAT of (string)
  | EOF
  | INPUT
  | OUTPUT
  | ASSERT_RETURN
  | ASSERT_RETURN_CANONICAL_NAN
  | ASSERT_RETURN_ARITHMETIC_NAN
  | ASSERT_TRAP
  | ASSERT_EXHAUSTION
  | ASSERT_MALFORMED
  | ASSERT_INVALID
  | ASSERT_SOFT_INVALID
  | ASSERT_UNLINKABLE
  | SCRIPT
  | REGISTER
  | INVOKE
  | GET
  | MODULE
  | BIN
  | QUOTE
  | TABLE
  | ELEM
  | MEMORY
  | DATA
  | OFFSET
  | IMPORT
  | EXPORT
  | FUNC
  | START
  | TYPE
  | PARAM
  | RESULT
  | LOCAL
  | GLOBAL
  | UNREACHABLE
  | CURRENT_MEMORY
  | GROW_MEMORY
  | GET_LOCAL
  | SET_LOCAL
  | TEE_LOCAL
  | GET_GLOBAL
  | SET_GLOBAL
  | CALL
  | CALL_INDIRECT
  | RETURN
  | NOP
  | DROP
  | BLOCK
  | END
  | IF
  | THEN
  | ELSE
  | SELECT
  | LOOP
  | BR
  | BR_IF
  | BR_TABLE
  | ANYFUNC
  | MUT
  | LPAR
  | RPAR
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ALIGN_EQ_NAT
    | TOKEN_OFFSET_EQ_NAT
    | TOKEN_STORE
    | TOKEN_LOAD
    | TOKEN_CONVERT
    | TOKEN_COMPARE
    | TOKEN_TEST
    | TOKEN_BINARY
    | TOKEN_UNARY
    | TOKEN_CONST
    | TOKEN_VALUE_TYPE
    | TOKEN_VAR
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_NAT
    | TOKEN_EOF
    | TOKEN_INPUT
    | TOKEN_OUTPUT
    | TOKEN_ASSERT_RETURN
    | TOKEN_ASSERT_RETURN_CANONICAL_NAN
    | TOKEN_ASSERT_RETURN_ARITHMETIC_NAN
    | TOKEN_ASSERT_TRAP
    | TOKEN_ASSERT_EXHAUSTION
    | TOKEN_ASSERT_MALFORMED
    | TOKEN_ASSERT_INVALID
    | TOKEN_ASSERT_SOFT_INVALID
    | TOKEN_ASSERT_UNLINKABLE
    | TOKEN_SCRIPT
    | TOKEN_REGISTER
    | TOKEN_INVOKE
    | TOKEN_GET
    | TOKEN_MODULE
    | TOKEN_BIN
    | TOKEN_QUOTE
    | TOKEN_TABLE
    | TOKEN_ELEM
    | TOKEN_MEMORY
    | TOKEN_DATA
    | TOKEN_OFFSET
    | TOKEN_IMPORT
    | TOKEN_EXPORT
    | TOKEN_FUNC
    | TOKEN_START
    | TOKEN_TYPE
    | TOKEN_PARAM
    | TOKEN_RESULT
    | TOKEN_LOCAL
    | TOKEN_GLOBAL
    | TOKEN_UNREACHABLE
    | TOKEN_CURRENT_MEMORY
    | TOKEN_GROW_MEMORY
    | TOKEN_GET_LOCAL
    | TOKEN_SET_LOCAL
    | TOKEN_TEE_LOCAL
    | TOKEN_GET_GLOBAL
    | TOKEN_SET_GLOBAL
    | TOKEN_CALL
    | TOKEN_CALL_INDIRECT
    | TOKEN_RETURN
    | TOKEN_NOP
    | TOKEN_DROP
    | TOKEN_BLOCK
    | TOKEN_END
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_SELECT
    | TOKEN_LOOP
    | TOKEN_BR
    | TOKEN_BR_IF
    | TOKEN_BR_TABLE
    | TOKEN_ANYFUNC
    | TOKEN_MUT
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startscript
    | NONTERM__startscript1
    | NONTERM__startmodule1
    | NONTERM_name
    | NONTERM_string_list
    | NONTERM_value_type_list
    | NONTERM_elem_type
    | NONTERM_global_type
    | NONTERM_func_type
    | NONTERM_func_sig
    | NONTERM_table_sig
    | NONTERM_memory_sig
    | NONTERM_limits
    | NONTERM_type_use
    | NONTERM_literal
    | NONTERM_var
    | NONTERM_var_list
    | NONTERM_bind_var_opt
    | NONTERM_bind_var
    | NONTERM_labeling_opt
    | NONTERM_labeling_end_opt
    | NONTERM_offset_opt
    | NONTERM_align_opt
    | NONTERM_instr
    | NONTERM_plain_instr
    | NONTERM_call_instr
    | NONTERM_call_instr_sig
    | NONTERM_call_instr_params
    | NONTERM_call_instr_results
    | NONTERM_block_instr
    | NONTERM_block_sig
    | NONTERM_block
    | NONTERM_expr
    | NONTERM_expr1
    | NONTERM_call_expr_sig
    | NONTERM_call_expr_params
    | NONTERM_call_expr_results
    | NONTERM_if_block
    | NONTERM_if_
    | NONTERM_instr_list
    | NONTERM_expr_list
    | NONTERM_const_expr
    | NONTERM_func
    | NONTERM_func_fields
    | NONTERM_func_fields_import
    | NONTERM_func_fields_import_result
    | NONTERM_func_fields_body
    | NONTERM_func_result_body
    | NONTERM_func_body
    | NONTERM_offset
    | NONTERM_elem
    | NONTERM_table
    | NONTERM_table_fields
    | NONTERM_data
    | NONTERM_memory
    | NONTERM_memory_fields
    | NONTERM_global_
    | NONTERM_global_fields
    | NONTERM_import_desc
    | NONTERM_import
    | NONTERM_inline_import
    | NONTERM_export_desc
    | NONTERM_export
    | NONTERM_inline_export
    | NONTERM_type_
    | NONTERM_type_def
    | NONTERM_start
    | NONTERM_module_fields
    | NONTERM_module_fields1
    | NONTERM_module_var_opt
    | NONTERM_module_
    | NONTERM_inline_module
    | NONTERM_inline_module1
    | NONTERM_script_var_opt
    | NONTERM_script_module
    | NONTERM_action
    | NONTERM_assertion
    | NONTERM_cmd
    | NONTERM_cmd_list
    | NONTERM_meta
    | NONTERM_const_
    | NONTERM_const_list
    | NONTERM_script
    | NONTERM_script1
    | NONTERM_module1

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ALIGN_EQ_NAT _ -> 0 
  | OFFSET_EQ_NAT _ -> 1 
  | STORE _ -> 2 
  | LOAD _ -> 3 
  | CONVERT _ -> 4 
  | COMPARE _ -> 5 
  | TEST _ -> 6 
  | BINARY _ -> 7 
  | UNARY _ -> 8 
  | CONST _ -> 9 
  | VALUE_TYPE _ -> 10 
  | VAR _ -> 11 
  | STRING _ -> 12 
  | FLOAT _ -> 13 
  | INT _ -> 14 
  | NAT _ -> 15 
  | EOF  -> 16 
  | INPUT  -> 17 
  | OUTPUT  -> 18 
  | ASSERT_RETURN  -> 19 
  | ASSERT_RETURN_CANONICAL_NAN  -> 20 
  | ASSERT_RETURN_ARITHMETIC_NAN  -> 21 
  | ASSERT_TRAP  -> 22 
  | ASSERT_EXHAUSTION  -> 23 
  | ASSERT_MALFORMED  -> 24 
  | ASSERT_INVALID  -> 25 
  | ASSERT_SOFT_INVALID  -> 26 
  | ASSERT_UNLINKABLE  -> 27 
  | SCRIPT  -> 28 
  | REGISTER  -> 29 
  | INVOKE  -> 30 
  | GET  -> 31 
  | MODULE  -> 32 
  | BIN  -> 33 
  | QUOTE  -> 34 
  | TABLE  -> 35 
  | ELEM  -> 36 
  | MEMORY  -> 37 
  | DATA  -> 38 
  | OFFSET  -> 39 
  | IMPORT  -> 40 
  | EXPORT  -> 41 
  | FUNC  -> 42 
  | START  -> 43 
  | TYPE  -> 44 
  | PARAM  -> 45 
  | RESULT  -> 46 
  | LOCAL  -> 47 
  | GLOBAL  -> 48 
  | UNREACHABLE  -> 49 
  | CURRENT_MEMORY  -> 50 
  | GROW_MEMORY  -> 51 
  | GET_LOCAL  -> 52 
  | SET_LOCAL  -> 53 
  | TEE_LOCAL  -> 54 
  | GET_GLOBAL  -> 55 
  | SET_GLOBAL  -> 56 
  | CALL  -> 57 
  | CALL_INDIRECT  -> 58 
  | RETURN  -> 59 
  | NOP  -> 60 
  | DROP  -> 61 
  | BLOCK  -> 62 
  | END  -> 63 
  | IF  -> 64 
  | THEN  -> 65 
  | ELSE  -> 66 
  | SELECT  -> 67 
  | LOOP  -> 68 
  | BR  -> 69 
  | BR_IF  -> 70 
  | BR_TABLE  -> 71 
  | ANYFUNC  -> 72 
  | MUT  -> 73 
  | LPAR  -> 74 
  | RPAR  -> 75 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ALIGN_EQ_NAT 
  | 1 -> TOKEN_OFFSET_EQ_NAT 
  | 2 -> TOKEN_STORE 
  | 3 -> TOKEN_LOAD 
  | 4 -> TOKEN_CONVERT 
  | 5 -> TOKEN_COMPARE 
  | 6 -> TOKEN_TEST 
  | 7 -> TOKEN_BINARY 
  | 8 -> TOKEN_UNARY 
  | 9 -> TOKEN_CONST 
  | 10 -> TOKEN_VALUE_TYPE 
  | 11 -> TOKEN_VAR 
  | 12 -> TOKEN_STRING 
  | 13 -> TOKEN_FLOAT 
  | 14 -> TOKEN_INT 
  | 15 -> TOKEN_NAT 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_INPUT 
  | 18 -> TOKEN_OUTPUT 
  | 19 -> TOKEN_ASSERT_RETURN 
  | 20 -> TOKEN_ASSERT_RETURN_CANONICAL_NAN 
  | 21 -> TOKEN_ASSERT_RETURN_ARITHMETIC_NAN 
  | 22 -> TOKEN_ASSERT_TRAP 
  | 23 -> TOKEN_ASSERT_EXHAUSTION 
  | 24 -> TOKEN_ASSERT_MALFORMED 
  | 25 -> TOKEN_ASSERT_INVALID 
  | 26 -> TOKEN_ASSERT_SOFT_INVALID 
  | 27 -> TOKEN_ASSERT_UNLINKABLE 
  | 28 -> TOKEN_SCRIPT 
  | 29 -> TOKEN_REGISTER 
  | 30 -> TOKEN_INVOKE 
  | 31 -> TOKEN_GET 
  | 32 -> TOKEN_MODULE 
  | 33 -> TOKEN_BIN 
  | 34 -> TOKEN_QUOTE 
  | 35 -> TOKEN_TABLE 
  | 36 -> TOKEN_ELEM 
  | 37 -> TOKEN_MEMORY 
  | 38 -> TOKEN_DATA 
  | 39 -> TOKEN_OFFSET 
  | 40 -> TOKEN_IMPORT 
  | 41 -> TOKEN_EXPORT 
  | 42 -> TOKEN_FUNC 
  | 43 -> TOKEN_START 
  | 44 -> TOKEN_TYPE 
  | 45 -> TOKEN_PARAM 
  | 46 -> TOKEN_RESULT 
  | 47 -> TOKEN_LOCAL 
  | 48 -> TOKEN_GLOBAL 
  | 49 -> TOKEN_UNREACHABLE 
  | 50 -> TOKEN_CURRENT_MEMORY 
  | 51 -> TOKEN_GROW_MEMORY 
  | 52 -> TOKEN_GET_LOCAL 
  | 53 -> TOKEN_SET_LOCAL 
  | 54 -> TOKEN_TEE_LOCAL 
  | 55 -> TOKEN_GET_GLOBAL 
  | 56 -> TOKEN_SET_GLOBAL 
  | 57 -> TOKEN_CALL 
  | 58 -> TOKEN_CALL_INDIRECT 
  | 59 -> TOKEN_RETURN 
  | 60 -> TOKEN_NOP 
  | 61 -> TOKEN_DROP 
  | 62 -> TOKEN_BLOCK 
  | 63 -> TOKEN_END 
  | 64 -> TOKEN_IF 
  | 65 -> TOKEN_THEN 
  | 66 -> TOKEN_ELSE 
  | 67 -> TOKEN_SELECT 
  | 68 -> TOKEN_LOOP 
  | 69 -> TOKEN_BR 
  | 70 -> TOKEN_BR_IF 
  | 71 -> TOKEN_BR_TABLE 
  | 72 -> TOKEN_ANYFUNC 
  | 73 -> TOKEN_MUT 
  | 74 -> TOKEN_LPAR 
  | 75 -> TOKEN_RPAR 
  | 78 -> TOKEN_end_of_input
  | 76 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startscript 
    | 1 -> NONTERM__startscript1 
    | 2 -> NONTERM__startmodule1 
    | 3 -> NONTERM_name 
    | 4 -> NONTERM_string_list 
    | 5 -> NONTERM_string_list 
    | 6 -> NONTERM_value_type_list 
    | 7 -> NONTERM_value_type_list 
    | 8 -> NONTERM_elem_type 
    | 9 -> NONTERM_global_type 
    | 10 -> NONTERM_global_type 
    | 11 -> NONTERM_func_type 
    | 12 -> NONTERM_func_sig 
    | 13 -> NONTERM_func_sig 
    | 14 -> NONTERM_func_sig 
    | 15 -> NONTERM_func_sig 
    | 16 -> NONTERM_table_sig 
    | 17 -> NONTERM_memory_sig 
    | 18 -> NONTERM_limits 
    | 19 -> NONTERM_limits 
    | 20 -> NONTERM_type_use 
    | 21 -> NONTERM_literal 
    | 22 -> NONTERM_literal 
    | 23 -> NONTERM_literal 
    | 24 -> NONTERM_var 
    | 25 -> NONTERM_var 
    | 26 -> NONTERM_var_list 
    | 27 -> NONTERM_var_list 
    | 28 -> NONTERM_bind_var_opt 
    | 29 -> NONTERM_bind_var_opt 
    | 30 -> NONTERM_bind_var 
    | 31 -> NONTERM_labeling_opt 
    | 32 -> NONTERM_labeling_opt 
    | 33 -> NONTERM_labeling_end_opt 
    | 34 -> NONTERM_labeling_end_opt 
    | 35 -> NONTERM_offset_opt 
    | 36 -> NONTERM_offset_opt 
    | 37 -> NONTERM_align_opt 
    | 38 -> NONTERM_align_opt 
    | 39 -> NONTERM_instr 
    | 40 -> NONTERM_instr 
    | 41 -> NONTERM_instr 
    | 42 -> NONTERM_instr 
    | 43 -> NONTERM_plain_instr 
    | 44 -> NONTERM_plain_instr 
    | 45 -> NONTERM_plain_instr 
    | 46 -> NONTERM_plain_instr 
    | 47 -> NONTERM_plain_instr 
    | 48 -> NONTERM_plain_instr 
    | 49 -> NONTERM_plain_instr 
    | 50 -> NONTERM_plain_instr 
    | 51 -> NONTERM_plain_instr 
    | 52 -> NONTERM_plain_instr 
    | 53 -> NONTERM_plain_instr 
    | 54 -> NONTERM_plain_instr 
    | 55 -> NONTERM_plain_instr 
    | 56 -> NONTERM_plain_instr 
    | 57 -> NONTERM_plain_instr 
    | 58 -> NONTERM_plain_instr 
    | 59 -> NONTERM_plain_instr 
    | 60 -> NONTERM_plain_instr 
    | 61 -> NONTERM_plain_instr 
    | 62 -> NONTERM_plain_instr 
    | 63 -> NONTERM_plain_instr 
    | 64 -> NONTERM_plain_instr 
    | 65 -> NONTERM_plain_instr 
    | 66 -> NONTERM_plain_instr 
    | 67 -> NONTERM_call_instr 
    | 68 -> NONTERM_call_instr_sig 
    | 69 -> NONTERM_call_instr_sig 
    | 70 -> NONTERM_call_instr_params 
    | 71 -> NONTERM_call_instr_params 
    | 72 -> NONTERM_call_instr_results 
    | 73 -> NONTERM_call_instr_results 
    | 74 -> NONTERM_block_instr 
    | 75 -> NONTERM_block_instr 
    | 76 -> NONTERM_block_instr 
    | 77 -> NONTERM_block_instr 
    | 78 -> NONTERM_block_sig 
    | 79 -> NONTERM_block 
    | 80 -> NONTERM_block 
    | 81 -> NONTERM_expr 
    | 82 -> NONTERM_expr1 
    | 83 -> NONTERM_expr1 
    | 84 -> NONTERM_expr1 
    | 85 -> NONTERM_expr1 
    | 86 -> NONTERM_expr1 
    | 87 -> NONTERM_call_expr_sig 
    | 88 -> NONTERM_call_expr_sig 
    | 89 -> NONTERM_call_expr_params 
    | 90 -> NONTERM_call_expr_params 
    | 91 -> NONTERM_call_expr_results 
    | 92 -> NONTERM_call_expr_results 
    | 93 -> NONTERM_if_block 
    | 94 -> NONTERM_if_block 
    | 95 -> NONTERM_if_ 
    | 96 -> NONTERM_if_ 
    | 97 -> NONTERM_if_ 
    | 98 -> NONTERM_instr_list 
    | 99 -> NONTERM_instr_list 
    | 100 -> NONTERM_expr_list 
    | 101 -> NONTERM_expr_list 
    | 102 -> NONTERM_const_expr 
    | 103 -> NONTERM_func 
    | 104 -> NONTERM_func_fields 
    | 105 -> NONTERM_func_fields 
    | 106 -> NONTERM_func_fields 
    | 107 -> NONTERM_func_fields 
    | 108 -> NONTERM_func_fields 
    | 109 -> NONTERM_func_fields_import 
    | 110 -> NONTERM_func_fields_import 
    | 111 -> NONTERM_func_fields_import 
    | 112 -> NONTERM_func_fields_import_result 
    | 113 -> NONTERM_func_fields_import_result 
    | 114 -> NONTERM_func_fields_body 
    | 115 -> NONTERM_func_fields_body 
    | 116 -> NONTERM_func_fields_body 
    | 117 -> NONTERM_func_result_body 
    | 118 -> NONTERM_func_result_body 
    | 119 -> NONTERM_func_body 
    | 120 -> NONTERM_func_body 
    | 121 -> NONTERM_func_body 
    | 122 -> NONTERM_offset 
    | 123 -> NONTERM_offset 
    | 124 -> NONTERM_elem 
    | 125 -> NONTERM_elem 
    | 126 -> NONTERM_table 
    | 127 -> NONTERM_table_fields 
    | 128 -> NONTERM_table_fields 
    | 129 -> NONTERM_table_fields 
    | 130 -> NONTERM_table_fields 
    | 131 -> NONTERM_data 
    | 132 -> NONTERM_data 
    | 133 -> NONTERM_memory 
    | 134 -> NONTERM_memory_fields 
    | 135 -> NONTERM_memory_fields 
    | 136 -> NONTERM_memory_fields 
    | 137 -> NONTERM_memory_fields 
    | 138 -> NONTERM_global_ 
    | 139 -> NONTERM_global_fields 
    | 140 -> NONTERM_global_fields 
    | 141 -> NONTERM_global_fields 
    | 142 -> NONTERM_import_desc 
    | 143 -> NONTERM_import_desc 
    | 144 -> NONTERM_import_desc 
    | 145 -> NONTERM_import_desc 
    | 146 -> NONTERM_import_desc 
    | 147 -> NONTERM_import 
    | 148 -> NONTERM_inline_import 
    | 149 -> NONTERM_export_desc 
    | 150 -> NONTERM_export_desc 
    | 151 -> NONTERM_export_desc 
    | 152 -> NONTERM_export_desc 
    | 153 -> NONTERM_export 
    | 154 -> NONTERM_inline_export 
    | 155 -> NONTERM_type_ 
    | 156 -> NONTERM_type_def 
    | 157 -> NONTERM_type_def 
    | 158 -> NONTERM_start 
    | 159 -> NONTERM_module_fields 
    | 160 -> NONTERM_module_fields 
    | 161 -> NONTERM_module_fields1 
    | 162 -> NONTERM_module_fields1 
    | 163 -> NONTERM_module_fields1 
    | 164 -> NONTERM_module_fields1 
    | 165 -> NONTERM_module_fields1 
    | 166 -> NONTERM_module_fields1 
    | 167 -> NONTERM_module_fields1 
    | 168 -> NONTERM_module_fields1 
    | 169 -> NONTERM_module_fields1 
    | 170 -> NONTERM_module_fields1 
    | 171 -> NONTERM_module_var_opt 
    | 172 -> NONTERM_module_var_opt 
    | 173 -> NONTERM_module_ 
    | 174 -> NONTERM_inline_module 
    | 175 -> NONTERM_inline_module1 
    | 176 -> NONTERM_script_var_opt 
    | 177 -> NONTERM_script_var_opt 
    | 178 -> NONTERM_script_module 
    | 179 -> NONTERM_script_module 
    | 180 -> NONTERM_script_module 
    | 181 -> NONTERM_action 
    | 182 -> NONTERM_action 
    | 183 -> NONTERM_assertion 
    | 184 -> NONTERM_assertion 
    | 185 -> NONTERM_assertion 
    | 186 -> NONTERM_assertion 
    | 187 -> NONTERM_assertion 
    | 188 -> NONTERM_assertion 
    | 189 -> NONTERM_assertion 
    | 190 -> NONTERM_assertion 
    | 191 -> NONTERM_assertion 
    | 192 -> NONTERM_cmd 
    | 193 -> NONTERM_cmd 
    | 194 -> NONTERM_cmd 
    | 195 -> NONTERM_cmd 
    | 196 -> NONTERM_cmd 
    | 197 -> NONTERM_cmd_list 
    | 198 -> NONTERM_cmd_list 
    | 199 -> NONTERM_meta 
    | 200 -> NONTERM_meta 
    | 201 -> NONTERM_meta 
    | 202 -> NONTERM_meta 
    | 203 -> NONTERM_const_ 
    | 204 -> NONTERM_const_list 
    | 205 -> NONTERM_const_list 
    | 206 -> NONTERM_script 
    | 207 -> NONTERM_script 
    | 208 -> NONTERM_script1 
    | 209 -> NONTERM_module1 
    | 210 -> NONTERM_module1 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 78 
let _fsyacc_tagOfErrorTerminal = 76

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ALIGN_EQ_NAT _ -> "ALIGN_EQ_NAT" 
  | OFFSET_EQ_NAT _ -> "OFFSET_EQ_NAT" 
  | STORE _ -> "STORE" 
  | LOAD _ -> "LOAD" 
  | CONVERT _ -> "CONVERT" 
  | COMPARE _ -> "COMPARE" 
  | TEST _ -> "TEST" 
  | BINARY _ -> "BINARY" 
  | UNARY _ -> "UNARY" 
  | CONST _ -> "CONST" 
  | VALUE_TYPE _ -> "VALUE_TYPE" 
  | VAR _ -> "VAR" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | NAT _ -> "NAT" 
  | EOF  -> "EOF" 
  | INPUT  -> "INPUT" 
  | OUTPUT  -> "OUTPUT" 
  | ASSERT_RETURN  -> "ASSERT_RETURN" 
  | ASSERT_RETURN_CANONICAL_NAN  -> "ASSERT_RETURN_CANONICAL_NAN" 
  | ASSERT_RETURN_ARITHMETIC_NAN  -> "ASSERT_RETURN_ARITHMETIC_NAN" 
  | ASSERT_TRAP  -> "ASSERT_TRAP" 
  | ASSERT_EXHAUSTION  -> "ASSERT_EXHAUSTION" 
  | ASSERT_MALFORMED  -> "ASSERT_MALFORMED" 
  | ASSERT_INVALID  -> "ASSERT_INVALID" 
  | ASSERT_SOFT_INVALID  -> "ASSERT_SOFT_INVALID" 
  | ASSERT_UNLINKABLE  -> "ASSERT_UNLINKABLE" 
  | SCRIPT  -> "SCRIPT" 
  | REGISTER  -> "REGISTER" 
  | INVOKE  -> "INVOKE" 
  | GET  -> "GET" 
  | MODULE  -> "MODULE" 
  | BIN  -> "BIN" 
  | QUOTE  -> "QUOTE" 
  | TABLE  -> "TABLE" 
  | ELEM  -> "ELEM" 
  | MEMORY  -> "MEMORY" 
  | DATA  -> "DATA" 
  | OFFSET  -> "OFFSET" 
  | IMPORT  -> "IMPORT" 
  | EXPORT  -> "EXPORT" 
  | FUNC  -> "FUNC" 
  | START  -> "START" 
  | TYPE  -> "TYPE" 
  | PARAM  -> "PARAM" 
  | RESULT  -> "RESULT" 
  | LOCAL  -> "LOCAL" 
  | GLOBAL  -> "GLOBAL" 
  | UNREACHABLE  -> "UNREACHABLE" 
  | CURRENT_MEMORY  -> "CURRENT_MEMORY" 
  | GROW_MEMORY  -> "GROW_MEMORY" 
  | GET_LOCAL  -> "GET_LOCAL" 
  | SET_LOCAL  -> "SET_LOCAL" 
  | TEE_LOCAL  -> "TEE_LOCAL" 
  | GET_GLOBAL  -> "GET_GLOBAL" 
  | SET_GLOBAL  -> "SET_GLOBAL" 
  | CALL  -> "CALL" 
  | CALL_INDIRECT  -> "CALL_INDIRECT" 
  | RETURN  -> "RETURN" 
  | NOP  -> "NOP" 
  | DROP  -> "DROP" 
  | BLOCK  -> "BLOCK" 
  | END  -> "END" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | SELECT  -> "SELECT" 
  | LOOP  -> "LOOP" 
  | BR  -> "BR" 
  | BR_IF  -> "BR_IF" 
  | BR_TABLE  -> "BR_TABLE" 
  | ANYFUNC  -> "ANYFUNC" 
  | MUT  -> "MUT" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ALIGN_EQ_NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OFFSET_EQ_NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STORE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LOAD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONVERT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMPARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BINARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VALUE_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | INPUT  -> (null : System.Object) 
  | OUTPUT  -> (null : System.Object) 
  | ASSERT_RETURN  -> (null : System.Object) 
  | ASSERT_RETURN_CANONICAL_NAN  -> (null : System.Object) 
  | ASSERT_RETURN_ARITHMETIC_NAN  -> (null : System.Object) 
  | ASSERT_TRAP  -> (null : System.Object) 
  | ASSERT_EXHAUSTION  -> (null : System.Object) 
  | ASSERT_MALFORMED  -> (null : System.Object) 
  | ASSERT_INVALID  -> (null : System.Object) 
  | ASSERT_SOFT_INVALID  -> (null : System.Object) 
  | ASSERT_UNLINKABLE  -> (null : System.Object) 
  | SCRIPT  -> (null : System.Object) 
  | REGISTER  -> (null : System.Object) 
  | INVOKE  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | BIN  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | TABLE  -> (null : System.Object) 
  | ELEM  -> (null : System.Object) 
  | MEMORY  -> (null : System.Object) 
  | DATA  -> (null : System.Object) 
  | OFFSET  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | EXPORT  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | START  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | PARAM  -> (null : System.Object) 
  | RESULT  -> (null : System.Object) 
  | LOCAL  -> (null : System.Object) 
  | GLOBAL  -> (null : System.Object) 
  | UNREACHABLE  -> (null : System.Object) 
  | CURRENT_MEMORY  -> (null : System.Object) 
  | GROW_MEMORY  -> (null : System.Object) 
  | GET_LOCAL  -> (null : System.Object) 
  | SET_LOCAL  -> (null : System.Object) 
  | TEE_LOCAL  -> (null : System.Object) 
  | GET_GLOBAL  -> (null : System.Object) 
  | SET_GLOBAL  -> (null : System.Object) 
  | CALL  -> (null : System.Object) 
  | CALL_INDIRECT  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | NOP  -> (null : System.Object) 
  | DROP  -> (null : System.Object) 
  | BLOCK  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | LOOP  -> (null : System.Object) 
  | BR  -> (null : System.Object) 
  | BR_IF  -> (null : System.Object) 
  | BR_TABLE  -> (null : System.Object) 
  | ANYFUNC  -> (null : System.Object) 
  | MUT  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 9us; 65535us; 333us; 334us; 334us; 335us; 339us; 340us; 340us; 341us; 356us; 357us; 360us; 361us; 414us; 415us; 419us; 420us; 458us; 459us; 5us; 65535us; 288us; 7us; 290us; 8us; 302us; 9us; 408us; 10us; 410us; 11us; 12us; 65535us; 13us; 14us; 28us; 29us; 32us; 33us; 114us; 115us; 120us; 121us; 179us; 180us; 184us; 185us; 224us; 225us; 233us; 234us; 238us; 239us; 247us; 248us; 252us; 253us; 3us; 65535us; 40us; 41us; 273us; 281us; 279us; 281us; 4us; 65535us; 305us; 308us; 310us; 311us; 312us; 308us; 330us; 331us; 2us; 65535us; 364us; 363us; 367us; 363us; 5us; 65535us; 23us; 24us; 30us; 31us; 34us; 35us; 38us; 39us; 316us; 319us; 4us; 65535us; 273us; 276us; 277us; 278us; 279us; 276us; 322us; 323us; 4us; 65535us; 293us; 296us; 297us; 298us; 299us; 296us; 326us; 327us; 8us; 65535us; 273us; 40us; 277us; 40us; 279us; 40us; 293us; 42us; 297us; 42us; 299us; 42us; 322us; 40us; 326us; 42us; 6us; 65535us; 108us; 110us; 165us; 176us; 210us; 213us; 216us; 217us; 220us; 213us; 316us; 317us; 2us; 65535us; 101us; 102us; 479us; 480us; 22us; 65535us; 49us; 50us; 57us; 57us; 71us; 72us; 73us; 74us; 75us; 76us; 76us; 57us; 79us; 80us; 83us; 84us; 85us; 86us; 87us; 88us; 89us; 90us; 91us; 92us; 264us; 265us; 266us; 57us; 269us; 57us; 283us; 57us; 286us; 287us; 344us; 345us; 347us; 348us; 350us; 351us; 353us; 354us; 370us; 371us; 5us; 65535us; 57us; 58us; 76us; 77us; 266us; 267us; 269us; 270us; 283us; 284us; 8us; 65535us; 209us; 210us; 272us; 273us; 292us; 293us; 304us; 305us; 315us; 316us; 321us; 322us; 325us; 326us; 329us; 330us; 24us; 65535us; 32us; 36us; 125us; 61us; 128us; 62us; 130us; 61us; 133us; 62us; 135us; 61us; 138us; 62us; 140us; 62us; 143us; 62us; 167us; 61us; 170us; 61us; 173us; 61us; 209us; 59us; 224us; 228us; 238us; 242us; 252us; 256us; 272us; 59us; 292us; 59us; 304us; 59us; 315us; 59us; 321us; 59us; 325us; 59us; 329us; 59us; 364us; 367us; 6us; 65535us; 125us; 126us; 130us; 131us; 135us; 136us; 167us; 168us; 170us; 171us; 173us; 174us; 5us; 65535us; 128us; 129us; 133us; 134us; 138us; 139us; 140us; 141us; 143us; 144us; 2us; 65535us; 93us; 94us; 96us; 97us; 2us; 65535us; 94us; 95us; 97us; 98us; 24us; 65535us; 108us; 124us; 110us; 124us; 116us; 124us; 122us; 124us; 126us; 201us; 131us; 201us; 136us; 201us; 141us; 201us; 150us; 201us; 168us; 201us; 171us; 201us; 194us; 201us; 198us; 201us; 201us; 201us; 210us; 201us; 213us; 201us; 220us; 201us; 240us; 201us; 244us; 201us; 249us; 201us; 254us; 201us; 258us; 201us; 260us; 201us; 308us; 201us; 39us; 65535us; 45us; 163us; 46us; 163us; 47us; 163us; 108us; 65us; 110us; 65us; 113us; 163us; 116us; 65us; 119us; 163us; 122us; 65us; 126us; 65us; 131us; 65us; 136us; 65us; 141us; 65us; 145us; 163us; 146us; 163us; 150us; 65us; 153us; 163us; 154us; 163us; 155us; 163us; 156us; 163us; 157us; 163us; 158us; 163us; 159us; 163us; 160us; 163us; 168us; 65us; 171us; 65us; 194us; 65us; 198us; 65us; 201us; 65us; 210us; 65us; 213us; 65us; 220us; 65us; 240us; 65us; 244us; 65us; 249us; 65us; 254us; 65us; 258us; 65us; 260us; 65us; 308us; 65us; 24us; 65535us; 108us; 66us; 110us; 66us; 116us; 66us; 122us; 66us; 126us; 66us; 131us; 66us; 136us; 66us; 141us; 66us; 150us; 66us; 168us; 66us; 171us; 66us; 194us; 66us; 198us; 66us; 201us; 66us; 210us; 66us; 213us; 66us; 220us; 66us; 240us; 66us; 244us; 66us; 249us; 66us; 254us; 66us; 258us; 66us; 260us; 66us; 308us; 66us; 1us; 65535us; 108us; 109us; 3us; 65535us; 108us; 112us; 110us; 111us; 116us; 117us; 4us; 65535us; 108us; 118us; 110us; 118us; 116us; 118us; 122us; 123us; 24us; 65535us; 108us; 67us; 110us; 67us; 116us; 67us; 122us; 67us; 126us; 67us; 131us; 67us; 136us; 67us; 141us; 67us; 150us; 67us; 168us; 67us; 171us; 67us; 194us; 67us; 198us; 67us; 201us; 67us; 210us; 67us; 213us; 67us; 220us; 67us; 240us; 67us; 244us; 67us; 249us; 67us; 254us; 67us; 258us; 67us; 260us; 67us; 308us; 67us; 7us; 65535us; 126us; 150us; 131us; 150us; 136us; 150us; 168us; 150us; 171us; 150us; 174us; 189us; 189us; 189us; 5us; 65535us; 126us; 127us; 131us; 132us; 136us; 137us; 168us; 169us; 171us; 172us; 37us; 65535us; 108us; 68us; 110us; 68us; 116us; 68us; 122us; 68us; 126us; 68us; 131us; 68us; 136us; 68us; 141us; 68us; 150us; 68us; 163us; 203us; 165us; 203us; 168us; 68us; 171us; 68us; 174us; 192us; 176us; 203us; 181us; 203us; 186us; 203us; 189us; 192us; 192us; 192us; 194us; 68us; 198us; 68us; 201us; 68us; 203us; 203us; 210us; 68us; 213us; 68us; 220us; 68us; 240us; 68us; 244us; 68us; 249us; 68us; 254us; 68us; 258us; 68us; 260us; 68us; 264us; 263us; 265us; 263us; 286us; 263us; 287us; 263us; 308us; 68us; 15us; 65535us; 45us; 161us; 46us; 161us; 47us; 161us; 113us; 161us; 119us; 161us; 145us; 161us; 146us; 161us; 153us; 161us; 154us; 161us; 155us; 161us; 156us; 161us; 157us; 161us; 158us; 161us; 159us; 161us; 160us; 161us; 1us; 65535us; 165us; 166us; 3us; 65535us; 165us; 178us; 176us; 177us; 181us; 182us; 4us; 65535us; 165us; 183us; 176us; 183us; 181us; 183us; 186us; 187us; 2us; 65535us; 174us; 175us; 189us; 190us; 3us; 65535us; 174us; 191us; 189us; 191us; 192us; 193us; 20us; 65535us; 126us; 152us; 131us; 152us; 136us; 152us; 141us; 142us; 150us; 151us; 168us; 152us; 171us; 152us; 194us; 195us; 198us; 199us; 201us; 202us; 210us; 251us; 213us; 251us; 220us; 251us; 240us; 251us; 244us; 251us; 249us; 251us; 254us; 251us; 258us; 251us; 260us; 205us; 308us; 205us; 6us; 65535us; 163us; 164us; 165us; 188us; 176us; 188us; 181us; 188us; 186us; 188us; 203us; 204us; 2us; 65535us; 260us; 261us; 308us; 309us; 14us; 65535us; 0us; 382us; 4us; 382us; 374us; 382us; 376us; 382us; 378us; 382us; 380us; 382us; 382us; 382us; 384us; 382us; 386us; 382us; 388us; 382us; 390us; 382us; 392us; 382us; 400us; 382us; 401us; 382us; 2us; 65535us; 210us; 211us; 220us; 221us; 4us; 65535us; 216us; 219us; 217us; 218us; 226us; 227us; 230us; 231us; 5us; 65535us; 216us; 222us; 217us; 222us; 226us; 222us; 230us; 222us; 235us; 236us; 5us; 65535us; 210us; 215us; 213us; 214us; 220us; 215us; 240us; 241us; 244us; 245us; 6us; 65535us; 210us; 237us; 213us; 237us; 220us; 237us; 240us; 237us; 244us; 237us; 249us; 250us; 8us; 65535us; 210us; 246us; 213us; 246us; 220us; 246us; 240us; 246us; 244us; 246us; 249us; 246us; 254us; 255us; 258us; 259us; 4us; 65535us; 264us; 269us; 265us; 266us; 286us; 290us; 287us; 288us; 14us; 65535us; 0us; 384us; 4us; 384us; 374us; 384us; 376us; 384us; 378us; 384us; 380us; 384us; 382us; 384us; 384us; 384us; 386us; 384us; 388us; 384us; 390us; 384us; 392us; 384us; 400us; 384us; 401us; 384us; 14us; 65535us; 0us; 378us; 4us; 378us; 374us; 378us; 376us; 378us; 378us; 378us; 380us; 378us; 382us; 378us; 384us; 378us; 386us; 378us; 388us; 378us; 390us; 378us; 392us; 378us; 400us; 378us; 401us; 378us; 2us; 65535us; 273us; 274us; 279us; 280us; 14us; 65535us; 0us; 386us; 4us; 386us; 374us; 386us; 376us; 386us; 378us; 386us; 380us; 386us; 382us; 386us; 384us; 386us; 386us; 386us; 388us; 386us; 390us; 386us; 392us; 386us; 400us; 386us; 401us; 386us; 14us; 65535us; 0us; 380us; 4us; 380us; 374us; 380us; 376us; 380us; 378us; 380us; 380us; 380us; 382us; 380us; 384us; 380us; 386us; 380us; 388us; 380us; 390us; 380us; 392us; 380us; 400us; 380us; 401us; 380us; 2us; 65535us; 293us; 294us; 299us; 300us; 14us; 65535us; 0us; 376us; 4us; 376us; 374us; 376us; 376us; 376us; 378us; 376us; 380us; 376us; 382us; 376us; 384us; 376us; 386us; 376us; 388us; 376us; 390us; 376us; 392us; 376us; 400us; 376us; 401us; 376us; 2us; 65535us; 305us; 306us; 312us; 313us; 1us; 65535us; 335us; 336us; 14us; 65535us; 0us; 390us; 4us; 390us; 374us; 390us; 376us; 390us; 378us; 390us; 380us; 390us; 382us; 390us; 384us; 390us; 386us; 390us; 388us; 390us; 390us; 390us; 392us; 390us; 400us; 390us; 401us; 390us; 8us; 65535us; 210us; 216us; 220us; 216us; 273us; 277us; 279us; 277us; 293us; 297us; 299us; 297us; 305us; 310us; 312us; 310us; 1us; 65535us; 357us; 358us; 14us; 65535us; 0us; 392us; 4us; 392us; 374us; 392us; 376us; 392us; 378us; 392us; 380us; 392us; 382us; 392us; 384us; 392us; 386us; 392us; 388us; 392us; 390us; 392us; 392us; 392us; 400us; 392us; 401us; 392us; 8us; 65535us; 210us; 220us; 220us; 220us; 273us; 279us; 279us; 279us; 293us; 299us; 299us; 299us; 305us; 312us; 312us; 312us; 2us; 65535us; 364us; 365us; 367us; 368us; 14us; 65535us; 0us; 374us; 4us; 374us; 374us; 374us; 376us; 374us; 378us; 374us; 380us; 374us; 382us; 374us; 384us; 374us; 386us; 374us; 388us; 374us; 390us; 374us; 392us; 374us; 400us; 374us; 401us; 374us; 14us; 65535us; 0us; 388us; 4us; 388us; 374us; 388us; 376us; 388us; 378us; 388us; 380us; 388us; 382us; 388us; 384us; 388us; 386us; 388us; 388us; 388us; 390us; 388us; 392us; 388us; 400us; 388us; 401us; 388us; 13us; 65535us; 4us; 404us; 374us; 375us; 376us; 377us; 378us; 379us; 380us; 381us; 382us; 383us; 384us; 385us; 386us; 387us; 388us; 389us; 390us; 391us; 392us; 393us; 400us; 402us; 401us; 402us; 14us; 65535us; 0us; 405us; 4us; 373us; 374us; 373us; 376us; 373us; 378us; 373us; 380us; 373us; 382us; 373us; 384us; 373us; 386us; 373us; 388us; 373us; 390us; 373us; 392us; 373us; 400us; 373us; 401us; 373us; 5us; 65535us; 398us; 400us; 399us; 401us; 413us; 414us; 418us; 419us; 459us; 460us; 9us; 65535us; 0us; 407us; 2us; 407us; 4us; 489us; 422us; 407us; 426us; 407us; 430us; 407us; 434us; 407us; 463us; 407us; 466us; 407us; 1us; 65535us; 4us; 491us; 1us; 65535us; 0us; 486us; 3us; 65535us; 465us; 466us; 469us; 470us; 473us; 474us; 8us; 65535us; 0us; 457us; 2us; 457us; 422us; 423us; 426us; 427us; 430us; 431us; 434us; 435us; 463us; 457us; 466us; 457us; 9us; 65535us; 0us; 455us; 2us; 455us; 434us; 448us; 438us; 439us; 442us; 443us; 445us; 446us; 451us; 452us; 463us; 455us; 466us; 455us; 4us; 65535us; 0us; 456us; 2us; 456us; 463us; 456us; 466us; 456us; 4us; 65535us; 0us; 463us; 2us; 488us; 463us; 463us; 466us; 463us; 3us; 65535us; 0us; 484us; 463us; 464us; 466us; 467us; 4us; 65535us; 0us; 462us; 2us; 462us; 463us; 462us; 466us; 462us; 3us; 65535us; 415us; 482us; 439us; 482us; 482us; 482us; 3us; 65535us; 415us; 416us; 439us; 440us; 482us; 483us; 1us; 65535us; 0us; 1us; 1us; 65535us; 2us; 3us; 1us; 65535us; 4us; 5us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 13us; 19us; 32us; 36us; 41us; 44us; 50us; 55us; 60us; 69us; 76us; 79us; 102us; 108us; 117us; 142us; 149us; 155us; 158us; 161us; 186us; 226us; 251us; 253us; 257us; 262us; 287us; 295us; 301us; 339us; 355us; 357us; 361us; 366us; 369us; 373us; 394us; 401us; 404us; 419us; 422us; 427us; 433us; 439us; 446us; 455us; 460us; 475us; 490us; 493us; 508us; 523us; 526us; 541us; 544us; 546us; 561us; 570us; 572us; 587us; 596us; 599us; 614us; 629us; 643us; 658us; 664us; 674us; 676us; 678us; 682us; 691us; 701us; 706us; 711us; 715us; 720us; 724us; 728us; 730us; 732us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 2us; 5us; 131us; 2us; 5us; 132us; 2us; 5us; 137us; 2us; 5us; 179us; 2us; 5us; 180us; 1us; 5us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 3us; 10us; 148us; 154us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 3us; 13us; 14us; 15us; 4us; 13us; 14us; 15us; 20us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 2us; 14us; 15us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 2us; 18us; 19us; 1us; 19us; 4us; 20us; 70us; 72us; 81us; 4us; 20us; 81us; 89us; 91us; 9us; 20us; 81us; 115us; 116us; 118us; 120us; 121us; 148us; 154us; 4us; 20us; 110us; 111us; 113us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 27us; 1us; 27us; 1us; 29us; 1us; 30us; 1us; 32us; 1us; 34us; 1us; 36us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 69us; 3us; 70us; 72us; 81us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 71us; 2us; 72us; 81us; 1us; 72us; 1us; 72us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 74us; 1us; 74us; 1us; 74us; 1us; 74us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 75us; 2us; 76us; 77us; 2us; 76us; 77us; 2us; 76us; 77us; 1us; 76us; 1us; 76us; 1us; 77us; 1us; 77us; 1us; 77us; 1us; 77us; 1us; 77us; 2us; 78us; 81us; 4us; 78us; 81us; 96us; 97us; 1us; 78us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 81us; 3us; 81us; 89us; 91us; 2us; 81us; 91us; 3us; 81us; 96us; 97us; 6us; 81us; 115us; 116us; 118us; 120us; 121us; 4us; 81us; 118us; 120us; 121us; 3us; 81us; 120us; 121us; 2us; 81us; 122us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 84us; 1us; 84us; 1us; 84us; 1us; 85us; 1us; 85us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 87us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 90us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 95us; 2us; 96us; 97us; 2us; 96us; 97us; 2us; 96us; 97us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 99us; 1us; 99us; 1us; 101us; 1us; 101us; 1us; 102us; 13us; 103us; 124us; 125us; 126us; 131us; 132us; 133us; 138us; 147us; 153us; 156us; 157us; 158us; 14us; 103us; 124us; 125us; 126us; 131us; 132us; 133us; 138us; 147us; 153us; 156us; 157us; 158us; 173us; 32us; 103us; 124us; 125us; 126us; 131us; 132us; 133us; 138us; 147us; 153us; 156us; 157us; 158us; 173us; 179us; 180us; 181us; 182us; 183us; 184us; 185us; 186us; 187us; 188us; 189us; 190us; 191us; 195us; 199us; 200us; 201us; 202us; 1us; 103us; 1us; 103us; 1us; 103us; 1us; 103us; 1us; 104us; 1us; 104us; 1us; 105us; 2us; 106us; 107us; 1us; 106us; 1us; 106us; 1us; 107us; 1us; 108us; 1us; 108us; 1us; 109us; 3us; 110us; 111us; 113us; 2us; 110us; 111us; 1us; 110us; 1us; 110us; 1us; 110us; 1us; 111us; 1us; 111us; 1us; 111us; 1us; 111us; 1us; 113us; 1us; 113us; 1us; 113us; 1us; 113us; 1us; 113us; 1us; 114us; 2us; 115us; 116us; 1us; 115us; 1us; 115us; 1us; 115us; 1us; 116us; 1us; 116us; 1us; 116us; 1us; 116us; 1us; 117us; 1us; 118us; 1us; 118us; 1us; 118us; 1us; 118us; 1us; 119us; 2us; 120us; 121us; 1us; 120us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 121us; 1us; 121us; 1us; 121us; 1us; 122us; 1us; 122us; 1us; 122us; 1us; 123us; 2us; 124us; 125us; 1us; 124us; 1us; 124us; 1us; 124us; 1us; 124us; 1us; 125us; 1us; 125us; 1us; 125us; 1us; 126us; 1us; 126us; 1us; 126us; 1us; 126us; 1us; 127us; 1us; 128us; 1us; 128us; 1us; 129us; 1us; 129us; 1us; 130us; 1us; 130us; 1us; 130us; 1us; 130us; 1us; 130us; 2us; 131us; 132us; 1us; 131us; 1us; 131us; 1us; 131us; 1us; 132us; 1us; 132us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 134us; 1us; 135us; 1us; 135us; 1us; 136us; 1us; 136us; 3us; 137us; 148us; 154us; 1us; 137us; 1us; 137us; 1us; 138us; 1us; 138us; 1us; 138us; 1us; 138us; 1us; 139us; 1us; 139us; 1us; 140us; 1us; 140us; 1us; 141us; 1us; 141us; 5us; 142us; 143us; 144us; 145us; 146us; 2us; 142us; 143us; 2us; 142us; 143us; 1us; 142us; 1us; 142us; 1us; 143us; 1us; 143us; 1us; 144us; 1us; 144us; 1us; 144us; 1us; 144us; 1us; 145us; 1us; 145us; 1us; 145us; 1us; 145us; 1us; 146us; 1us; 146us; 1us; 146us; 1us; 146us; 1us; 147us; 1us; 147us; 1us; 147us; 1us; 147us; 1us; 147us; 2us; 148us; 154us; 1us; 148us; 1us; 148us; 1us; 148us; 1us; 148us; 4us; 149us; 150us; 151us; 152us; 1us; 149us; 1us; 149us; 1us; 149us; 1us; 150us; 1us; 150us; 1us; 150us; 1us; 151us; 1us; 151us; 1us; 151us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 154us; 1us; 154us; 1us; 154us; 1us; 155us; 2us; 156us; 157us; 1us; 156us; 1us; 156us; 1us; 157us; 1us; 157us; 1us; 157us; 1us; 158us; 1us; 158us; 1us; 158us; 1us; 160us; 1us; 161us; 1us; 161us; 1us; 162us; 1us; 162us; 1us; 163us; 1us; 163us; 1us; 164us; 1us; 164us; 1us; 165us; 1us; 165us; 1us; 166us; 1us; 166us; 1us; 167us; 1us; 167us; 1us; 168us; 1us; 168us; 1us; 169us; 1us; 169us; 1us; 170us; 1us; 170us; 1us; 172us; 3us; 173us; 179us; 180us; 5us; 173us; 179us; 180us; 181us; 182us; 19us; 173us; 179us; 180us; 181us; 182us; 183us; 184us; 185us; 186us; 187us; 188us; 189us; 190us; 191us; 195us; 199us; 200us; 201us; 202us; 1us; 173us; 3us; 173us; 179us; 180us; 1us; 173us; 3us; 173us; 179us; 180us; 1us; 173us; 1us; 173us; 1us; 174us; 1us; 175us; 1us; 177us; 1us; 178us; 1us; 179us; 1us; 179us; 1us; 180us; 1us; 180us; 2us; 181us; 182us; 1us; 181us; 1us; 181us; 1us; 181us; 1us; 181us; 1us; 181us; 1us; 182us; 1us; 182us; 1us; 182us; 1us; 182us; 1us; 183us; 1us; 183us; 1us; 183us; 1us; 183us; 1us; 184us; 1us; 184us; 1us; 184us; 1us; 184us; 1us; 185us; 1us; 185us; 1us; 185us; 1us; 185us; 2us; 186us; 190us; 1us; 186us; 1us; 186us; 1us; 186us; 1us; 187us; 1us; 187us; 1us; 187us; 1us; 187us; 1us; 188us; 1us; 188us; 1us; 188us; 1us; 189us; 1us; 189us; 1us; 189us; 1us; 190us; 1us; 190us; 1us; 190us; 1us; 191us; 1us; 191us; 1us; 191us; 1us; 191us; 1us; 192us; 1us; 193us; 1us; 194us; 1us; 195us; 1us; 195us; 1us; 195us; 1us; 195us; 1us; 196us; 1us; 198us; 1us; 198us; 1us; 199us; 1us; 199us; 1us; 199us; 1us; 199us; 1us; 200us; 1us; 200us; 1us; 200us; 1us; 200us; 2us; 201us; 202us; 2us; 201us; 202us; 1us; 201us; 1us; 201us; 1us; 202us; 1us; 203us; 1us; 203us; 1us; 203us; 1us; 203us; 1us; 205us; 1us; 205us; 1us; 206us; 1us; 206us; 1us; 207us; 1us; 207us; 1us; 208us; 1us; 209us; 1us; 209us; 1us; 210us; 1us; 210us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 17us; 20us; 23us; 26us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 63us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 102us; 104us; 109us; 114us; 124us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 261us; 263us; 265us; 267us; 269us; 271us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 304us; 307us; 310us; 313us; 315us; 317us; 319us; 321us; 323us; 325us; 327us; 330us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 353us; 356us; 360us; 367us; 372us; 376us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 417us; 419us; 421us; 423us; 425us; 427us; 429us; 431us; 433us; 435us; 437us; 439us; 441us; 443us; 445us; 448us; 451us; 454us; 456us; 458us; 460us; 462us; 464us; 466us; 468us; 470us; 472us; 486us; 501us; 534us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 551us; 553us; 555us; 557us; 559us; 561us; 563us; 567us; 570us; 572us; 574us; 576us; 578us; 580us; 582us; 584us; 586us; 588us; 590us; 592us; 594us; 596us; 599us; 601us; 603us; 605us; 607us; 609us; 611us; 613us; 615us; 617us; 619us; 621us; 623us; 625us; 628us; 630us; 632us; 634us; 636us; 638us; 640us; 642us; 644us; 646us; 648us; 650us; 653us; 655us; 657us; 659us; 661us; 663us; 665us; 667us; 669us; 671us; 673us; 675us; 677us; 679us; 681us; 683us; 685us; 687us; 689us; 691us; 693us; 695us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 712us; 714us; 716us; 718us; 720us; 722us; 724us; 726us; 730us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 760us; 763us; 766us; 768us; 770us; 772us; 774us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 800us; 802us; 804us; 806us; 808us; 811us; 813us; 815us; 817us; 819us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 848us; 850us; 852us; 854us; 856us; 858us; 860us; 862us; 864us; 867us; 869us; 871us; 873us; 875us; 877us; 879us; 881us; 883us; 885us; 887us; 889us; 891us; 893us; 895us; 897us; 899us; 901us; 903us; 905us; 907us; 909us; 911us; 913us; 915us; 917us; 919us; 921us; 923us; 925us; 927us; 931us; 937us; 957us; 959us; 963us; 965us; 969us; 971us; 973us; 975us; 977us; 979us; 981us; 983us; 985us; 987us; 989us; 992us; 994us; 996us; 998us; 1000us; 1002us; 1004us; 1006us; 1008us; 1010us; 1012us; 1014us; 1016us; 1018us; 1020us; 1022us; 1024us; 1026us; 1028us; 1030us; 1032us; 1034us; 1037us; 1039us; 1041us; 1043us; 1045us; 1047us; 1049us; 1051us; 1053us; 1055us; 1057us; 1059us; 1061us; 1063us; 1065us; 1067us; 1069us; 1071us; 1073us; 1075us; 1077us; 1079us; 1081us; 1083us; 1085us; 1087us; 1089us; 1091us; 1093us; 1095us; 1097us; 1099us; 1101us; 1103us; 1105us; 1107us; 1109us; 1111us; 1113us; 1116us; 1119us; 1121us; 1123us; 1125us; 1127us; 1129us; 1131us; 1133us; 1135us; 1137us; 1139us; 1141us; 1143us; 1145us; 1147us; 1149us; 1151us; 1153us; |]
let _fsyacc_action_rows = 493
let _fsyacc_actionTableElements = [|1us; 16581us; 74us; 208us; 0us; 49152us; 1us; 32768us; 74us; 397us; 0us; 49152us; 1us; 16543us; 74us; 207us; 0us; 49152us; 0us; 16387us; 2us; 32768us; 12us; 12us; 75us; 289us; 2us; 32768us; 12us; 12us; 75us; 291us; 2us; 32768us; 12us; 12us; 75us; 303us; 2us; 32768us; 12us; 12us; 75us; 409us; 2us; 32768us; 12us; 12us; 75us; 411us; 0us; 16389us; 1us; 16390us; 10us; 13us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 73us; 19us; 3us; 32768us; 40us; 339us; 41us; 360us; 73us; 19us; 1us; 32768us; 10us; 20us; 1us; 32768us; 75us; 21us; 0us; 16394us; 1us; 32768us; 42us; 23us; 1us; 16396us; 74us; 26us; 1us; 32768us; 75us; 25us; 0us; 16395us; 2us; 32768us; 45us; 32us; 46us; 28us; 3us; 32768us; 44us; 49us; 45us; 32us; 46us; 28us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 30us; 1us; 16396us; 74us; 26us; 0us; 16397us; 2us; 16390us; 10us; 13us; 11us; 60us; 1us; 32768us; 75us; 34us; 1us; 16396us; 74us; 26us; 0us; 16398us; 1us; 32768us; 10us; 37us; 1us; 32768us; 75us; 38us; 1us; 16396us; 74us; 26us; 0us; 16399us; 1us; 32768us; 72us; 15us; 0us; 16400us; 0us; 16401us; 1us; 16402us; 15us; 44us; 0us; 16403us; 31us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 44us; 49us; 45us; 114us; 46us; 120us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 31us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 44us; 49us; 45us; 179us; 46us; 184us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 34us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 40us; 339us; 41us; 360us; 44us; 49us; 45us; 238us; 46us; 247us; 47us; 252us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 3us; 32768us; 44us; 49us; 45us; 224us; 46us; 233us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 51us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 2us; 16410us; 11us; 56us; 15us; 55us; 0us; 16411us; 0us; 16413us; 0us; 16414us; 0us; 16416us; 0us; 16418us; 0us; 16420us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16429us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16430us; 2us; 32768us; 11us; 56us; 15us; 55us; 2us; 16410us; 11us; 56us; 15us; 55us; 0us; 16431us; 0us; 16432us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16436us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16437us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16438us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16439us; 2us; 32768us; 11us; 56us; 15us; 55us; 0us; 16440us; 1us; 16419us; 1us; 63us; 1us; 16421us; 0us; 64us; 0us; 16441us; 1us; 16419us; 1us; 63us; 1us; 16421us; 0us; 64us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 3us; 32768us; 13us; 54us; 14us; 53us; 15us; 52us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 45us; 0us; 16451us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 113us; 0us; 16452us; 0us; 16453us; 30us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 45us; 114us; 46us; 120us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 116us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 113us; 0us; 16454us; 0us; 16455us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 46us; 120us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 122us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 119us; 0us; 16456us; 0us; 16457us; 1us; 16415us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 145us; 1us; 32768us; 63us; 128us; 1us; 16417us; 11us; 60us; 0us; 16458us; 1us; 16415us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 145us; 1us; 32768us; 63us; 133us; 1us; 16417us; 11us; 60us; 0us; 16459us; 1us; 16415us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 145us; 2us; 32768us; 63us; 138us; 66us; 140us; 1us; 16417us; 11us; 60us; 0us; 16460us; 1us; 16417us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 1us; 32768us; 63us; 143us; 1us; 16417us; 11us; 60us; 0us; 16461us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 46us; 147us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 30us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 46us; 147us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 65us; 194us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 1us; 32768us; 10us; 148us; 1us; 32768us; 75us; 149us; 0us; 16462us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 0us; 16463us; 0us; 16464us; 28us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 30us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 45us; 179us; 46us; 184us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 46us; 184us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 65us; 194us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 31us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 45us; 238us; 46us; 247us; 47us; 252us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 30us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 46us; 247us; 47us; 252us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 47us; 252us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 29us; 32768us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 39us; 260us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 165us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 167us; 64us; 173us; 67us; 82us; 68us; 170us; 69us; 71us; 70us; 73us; 71us; 75us; 1us; 32768us; 75us; 162us; 0us; 16465us; 1us; 16484us; 74us; 153us; 0us; 16466us; 1us; 16484us; 74us; 46us; 0us; 16467us; 1us; 16415us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 145us; 0us; 16468us; 1us; 16415us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 145us; 0us; 16469us; 1us; 16415us; 11us; 60us; 1us; 32768us; 74us; 146us; 0us; 16470us; 1us; 16484us; 74us; 154us; 0us; 16471us; 0us; 16472us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 181us; 1us; 16484us; 74us; 154us; 0us; 16473us; 0us; 16474us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 186us; 1us; 16484us; 74us; 155us; 0us; 16475us; 0us; 16476us; 1us; 32768us; 74us; 146us; 0us; 16477us; 0us; 16478us; 1us; 32768us; 74us; 156us; 0us; 16479us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 1us; 32768us; 75us; 196us; 1us; 16481us; 74us; 197us; 1us; 32768us; 66us; 198us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 1us; 32768us; 75us; 200us; 0us; 16480us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 0us; 16483us; 1us; 16484us; 74us; 153us; 0us; 16485us; 0us; 16486us; 10us; 32768us; 35us; 272us; 36us; 264us; 37us; 292us; 38us; 286us; 40us; 333us; 41us; 356us; 42us; 209us; 43us; 370us; 44us; 364us; 48us; 304us; 11us; 32768us; 32us; 398us; 35us; 272us; 36us; 264us; 37us; 292us; 38us; 286us; 40us; 333us; 41us; 356us; 42us; 209us; 43us; 370us; 44us; 364us; 48us; 304us; 25us; 32768us; 17us; 469us; 18us; 473us; 19us; 438us; 20us; 442us; 21us; 445us; 22us; 434us; 23us; 451us; 24us; 422us; 25us; 426us; 27us; 430us; 28us; 465us; 29us; 458us; 30us; 413us; 31us; 418us; 32us; 399us; 35us; 272us; 36us; 264us; 37us; 292us; 38us; 286us; 40us; 333us; 41us; 356us; 42us; 209us; 43us; 370us; 44us; 364us; 48us; 304us; 1us; 16412us; 11us; 60us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 47us; 1us; 32768us; 75us; 212us; 0us; 16487us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 157us; 0us; 16488us; 0us; 16489us; 1us; 16496us; 74us; 48us; 1us; 16496us; 74us; 223us; 0us; 16490us; 0us; 16491us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 47us; 0us; 16492us; 0us; 16493us; 2us; 32768us; 45us; 224us; 46us; 233us; 2us; 16390us; 10us; 13us; 11us; 60us; 1us; 32768us; 75us; 226us; 1us; 16496us; 74us; 223us; 0us; 16494us; 1us; 32768us; 10us; 229us; 1us; 32768us; 75us; 230us; 1us; 16496us; 74us; 223us; 0us; 16495us; 1us; 32768us; 46us; 233us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 235us; 1us; 16496us; 74us; 232us; 0us; 16497us; 0us; 16498us; 2us; 16390us; 10us; 13us; 11us; 60us; 1us; 32768us; 75us; 240us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 157us; 0us; 16499us; 1us; 32768us; 10us; 243us; 1us; 32768us; 75us; 244us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 157us; 0us; 16500us; 0us; 16501us; 1us; 16390us; 10us; 13us; 1us; 32768us; 75us; 249us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 158us; 0us; 16502us; 0us; 16503us; 2us; 16390us; 10us; 13us; 11us; 60us; 1us; 32768us; 75us; 254us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 159us; 0us; 16504us; 1us; 32768us; 10us; 257us; 1us; 32768us; 75us; 258us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 159us; 0us; 16505us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 1us; 32768us; 75us; 262us; 0us; 16506us; 0us; 16507us; 3us; 32768us; 11us; 56us; 15us; 55us; 74us; 160us; 1us; 32768us; 74us; 160us; 2us; 16410us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 268us; 0us; 16508us; 2us; 16410us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 271us; 0us; 16509us; 1us; 16412us; 11us; 60us; 3us; 32768us; 15us; 43us; 72us; 15us; 74us; 338us; 1us; 32768us; 75us; 275us; 0us; 16510us; 0us; 16511us; 1us; 32768us; 15us; 43us; 0us; 16512us; 3us; 32768us; 15us; 43us; 72us; 15us; 74us; 338us; 0us; 16513us; 1us; 32768us; 74us; 282us; 1us; 32768us; 36us; 283us; 2us; 16410us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 285us; 0us; 16514us; 3us; 32768us; 11us; 56us; 15us; 55us; 74us; 160us; 1us; 32768us; 74us; 160us; 0us; 16388us; 0us; 16515us; 0us; 16388us; 0us; 16516us; 1us; 16412us; 11us; 60us; 2us; 32768us; 15us; 43us; 74us; 301us; 1us; 32768us; 75us; 295us; 0us; 16517us; 0us; 16518us; 1us; 32768us; 15us; 43us; 0us; 16519us; 2us; 32768us; 15us; 43us; 74us; 301us; 0us; 16520us; 3us; 32768us; 38us; 302us; 40us; 339us; 41us; 360us; 0us; 16388us; 0us; 16521us; 1us; 16412us; 11us; 60us; 2us; 32768us; 10us; 16us; 74us; 18us; 1us; 32768us; 75us; 307us; 0us; 16522us; 29us; 16482us; 2us; 96us; 3us; 93us; 4us; 107us; 5us; 104us; 6us; 103us; 7us; 106us; 8us; 105us; 9us; 101us; 49us; 69us; 50us; 99us; 51us; 100us; 52us; 83us; 53us; 85us; 54us; 87us; 55us; 89us; 56us; 91us; 57us; 79us; 58us; 108us; 59us; 78us; 60us; 70us; 61us; 81us; 62us; 125us; 64us; 135us; 67us; 82us; 68us; 130us; 69us; 71us; 70us; 73us; 71us; 75us; 74us; 153us; 0us; 16523us; 2us; 32768us; 10us; 16us; 74us; 17us; 0us; 16524us; 2us; 32768us; 10us; 16us; 74us; 18us; 0us; 16525us; 4us; 32768us; 35us; 321us; 37us; 325us; 42us; 315us; 48us; 329us; 1us; 16412us; 11us; 60us; 1us; 16396us; 74us; 27us; 1us; 32768us; 75us; 318us; 0us; 16526us; 1us; 32768us; 75us; 320us; 0us; 16527us; 1us; 16412us; 11us; 60us; 1us; 32768us; 15us; 43us; 1us; 32768us; 75us; 324us; 0us; 16528us; 1us; 16412us; 11us; 60us; 1us; 32768us; 15us; 43us; 1us; 32768us; 75us; 328us; 0us; 16529us; 1us; 16412us; 11us; 60us; 2us; 32768us; 10us; 16us; 74us; 17us; 1us; 32768us; 75us; 332us; 0us; 16530us; 1us; 32768us; 12us; 6us; 1us; 32768us; 12us; 6us; 1us; 32768us; 74us; 314us; 1us; 32768us; 75us; 337us; 0us; 16531us; 2us; 32768us; 40us; 339us; 41us; 360us; 1us; 32768us; 12us; 6us; 1us; 32768us; 12us; 6us; 1us; 32768us; 75us; 342us; 0us; 16532us; 4us; 32768us; 35us; 347us; 37us; 350us; 42us; 344us; 48us; 353us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 346us; 0us; 16533us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 349us; 0us; 16534us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 352us; 0us; 16535us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 355us; 0us; 16536us; 1us; 32768us; 12us; 6us; 1us; 32768us; 74us; 343us; 1us; 32768us; 75us; 359us; 0us; 16537us; 1us; 32768us; 12us; 6us; 1us; 32768us; 75us; 362us; 0us; 16538us; 0us; 16539us; 2us; 32768us; 11us; 60us; 74us; 22us; 1us; 32768us; 75us; 366us; 0us; 16540us; 1us; 32768us; 74us; 22us; 1us; 32768us; 75us; 369us; 0us; 16541us; 2us; 32768us; 11us; 56us; 15us; 55us; 1us; 32768us; 75us; 372us; 0us; 16542us; 0us; 16544us; 1us; 16543us; 74us; 206us; 0us; 16545us; 1us; 16543us; 74us; 206us; 0us; 16546us; 1us; 16543us; 74us; 206us; 0us; 16547us; 1us; 16543us; 74us; 206us; 0us; 16548us; 1us; 16543us; 74us; 206us; 0us; 16549us; 1us; 16543us; 74us; 206us; 0us; 16550us; 1us; 16543us; 74us; 206us; 0us; 16551us; 1us; 16543us; 74us; 206us; 0us; 16552us; 1us; 16543us; 74us; 206us; 0us; 16553us; 1us; 16543us; 74us; 206us; 0us; 16554us; 0us; 16556us; 1us; 32768us; 32us; 399us; 3us; 32768us; 30us; 413us; 31us; 418us; 32us; 399us; 15us; 32768us; 17us; 469us; 18us; 473us; 19us; 438us; 20us; 442us; 21us; 445us; 22us; 434us; 23us; 451us; 24us; 422us; 25us; 426us; 27us; 430us; 28us; 465us; 29us; 458us; 30us; 413us; 31us; 418us; 32us; 399us; 1us; 16555us; 11us; 394us; 1us; 16555us; 11us; 394us; 1us; 16543us; 74us; 206us; 3us; 16543us; 33us; 408us; 34us; 410us; 74us; 206us; 1us; 32768us; 75us; 403us; 0us; 16557us; 0us; 16558us; 0us; 16559us; 0us; 16561us; 0us; 16562us; 0us; 16388us; 0us; 16563us; 0us; 16388us; 0us; 16564us; 2us; 32768us; 30us; 413us; 31us; 418us; 1us; 16555us; 11us; 394us; 1us; 32768us; 12us; 6us; 1us; 16588us; 74us; 478us; 1us; 32768us; 75us; 417us; 0us; 16565us; 1us; 16555us; 11us; 394us; 1us; 32768us; 12us; 6us; 1us; 32768us; 75us; 421us; 0us; 16566us; 1us; 32768us; 74us; 395us; 1us; 32768us; 12us; 424us; 1us; 32768us; 75us; 425us; 0us; 16567us; 1us; 32768us; 74us; 395us; 1us; 32768us; 12us; 428us; 1us; 32768us; 75us; 429us; 0us; 16568us; 1us; 32768us; 74us; 395us; 1us; 32768us; 12us; 432us; 1us; 32768us; 75us; 433us; 0us; 16569us; 1us; 32768us; 74us; 396us; 1us; 32768us; 12us; 436us; 1us; 32768us; 75us; 437us; 0us; 16570us; 1us; 32768us; 74us; 412us; 1us; 16588us; 74us; 478us; 1us; 32768us; 75us; 441us; 0us; 16571us; 1us; 32768us; 74us; 412us; 1us; 32768us; 75us; 444us; 0us; 16572us; 1us; 32768us; 74us; 412us; 1us; 32768us; 75us; 447us; 0us; 16573us; 1us; 32768us; 12us; 449us; 1us; 32768us; 75us; 450us; 0us; 16574us; 1us; 32768us; 74us; 412us; 1us; 32768us; 12us; 453us; 1us; 32768us; 75us; 454us; 0us; 16575us; 0us; 16576us; 0us; 16577us; 0us; 16578us; 1us; 32768us; 12us; 6us; 1us; 16555us; 11us; 394us; 1us; 32768us; 75us; 461us; 0us; 16579us; 0us; 16580us; 1us; 16581us; 74us; 397us; 0us; 16582us; 1us; 16560us; 11us; 406us; 1us; 16581us; 74us; 397us; 1us; 32768us; 75us; 468us; 0us; 16583us; 1us; 16560us; 11us; 406us; 1us; 32768us; 12us; 471us; 1us; 32768us; 75us; 472us; 0us; 16584us; 1us; 16560us; 11us; 406us; 2us; 32768us; 12us; 475us; 75us; 477us; 1us; 32768us; 75us; 476us; 0us; 16585us; 0us; 16586us; 1us; 32768us; 9us; 479us; 3us; 32768us; 13us; 54us; 14us; 53us; 15us; 52us; 1us; 32768us; 75us; 481us; 0us; 16587us; 1us; 16588us; 74us; 478us; 0us; 16589us; 1us; 32768us; 16us; 485us; 0us; 16590us; 1us; 32768us; 16us; 487us; 0us; 16591us; 0us; 16592us; 1us; 32768us; 16us; 490us; 0us; 16593us; 1us; 32768us; 16us; 492us; 0us; 16594us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 10us; 13us; 16us; 19us; 22us; 25us; 26us; 28us; 29us; 30us; 31us; 33us; 37us; 39us; 41us; 42us; 44us; 46us; 48us; 49us; 52us; 56us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 73us; 75us; 77us; 78us; 80us; 81us; 82us; 84us; 85us; 117us; 149us; 184us; 188us; 191us; 193us; 194us; 195us; 196us; 197us; 198us; 199us; 202us; 203us; 204us; 205us; 206us; 207us; 208us; 209us; 210us; 211us; 212us; 213us; 214us; 215us; 218us; 219us; 222us; 223us; 226us; 229us; 230us; 231us; 234us; 235us; 236us; 237us; 240us; 241us; 244us; 245us; 248us; 249us; 252us; 253us; 256us; 257us; 259us; 261us; 262us; 264us; 266us; 267us; 268us; 269us; 273us; 274us; 275us; 276us; 277us; 278us; 279us; 309us; 310us; 340us; 341us; 342us; 373us; 375us; 377us; 407us; 408us; 409us; 439us; 441us; 443us; 473us; 474us; 475us; 477us; 507us; 509us; 511us; 512us; 514us; 544us; 546us; 548us; 549us; 551us; 581us; 584us; 586us; 587us; 589us; 619us; 621us; 623us; 624us; 654us; 685us; 687us; 689us; 690us; 720us; 721us; 722us; 751us; 782us; 812us; 842us; 874us; 905us; 935us; 965us; 967us; 968us; 970us; 971us; 973us; 974us; 976us; 1006us; 1007us; 1009us; 1039us; 1040us; 1042us; 1044us; 1045us; 1047us; 1048us; 1049us; 1051us; 1053us; 1055us; 1056us; 1057us; 1059us; 1061us; 1063us; 1064us; 1065us; 1067us; 1068us; 1069us; 1071us; 1072us; 1102us; 1104us; 1106us; 1108us; 1138us; 1140us; 1141us; 1171us; 1172us; 1174us; 1175us; 1176us; 1187us; 1199us; 1225us; 1227us; 1257us; 1259us; 1260us; 1290us; 1291us; 1292us; 1294us; 1296us; 1297us; 1298us; 1328us; 1329us; 1330us; 1333us; 1336us; 1338us; 1340us; 1341us; 1343us; 1345us; 1347us; 1348us; 1350us; 1352us; 1354us; 1356us; 1357us; 1358us; 1361us; 1363us; 1393us; 1394us; 1396us; 1398us; 1428us; 1429us; 1430us; 1432us; 1434us; 1464us; 1465us; 1466us; 1469us; 1471us; 1501us; 1502us; 1504us; 1506us; 1536us; 1537us; 1567us; 1569us; 1570us; 1571us; 1575us; 1577us; 1580us; 1582us; 1583us; 1586us; 1588us; 1589us; 1591us; 1595us; 1597us; 1598us; 1599us; 1601us; 1602us; 1606us; 1607us; 1609us; 1611us; 1614us; 1616us; 1617us; 1621us; 1623us; 1624us; 1625us; 1626us; 1627us; 1629us; 1632us; 1634us; 1635us; 1636us; 1638us; 1639us; 1642us; 1643us; 1647us; 1648us; 1649us; 1651us; 1654us; 1656us; 1657us; 1687us; 1688us; 1691us; 1692us; 1695us; 1696us; 1701us; 1703us; 1705us; 1707us; 1708us; 1710us; 1711us; 1713us; 1715us; 1717us; 1718us; 1720us; 1722us; 1724us; 1725us; 1727us; 1730us; 1732us; 1733us; 1735us; 1737us; 1739us; 1741us; 1742us; 1745us; 1747us; 1749us; 1751us; 1752us; 1757us; 1760us; 1762us; 1763us; 1766us; 1768us; 1769us; 1772us; 1774us; 1775us; 1778us; 1780us; 1781us; 1783us; 1785us; 1787us; 1788us; 1790us; 1792us; 1793us; 1794us; 1797us; 1799us; 1800us; 1802us; 1804us; 1805us; 1808us; 1810us; 1811us; 1812us; 1814us; 1815us; 1817us; 1818us; 1820us; 1821us; 1823us; 1824us; 1826us; 1827us; 1829us; 1830us; 1832us; 1833us; 1835us; 1836us; 1838us; 1839us; 1841us; 1842us; 1843us; 1845us; 1849us; 1865us; 1867us; 1869us; 1871us; 1875us; 1877us; 1878us; 1879us; 1880us; 1881us; 1882us; 1883us; 1884us; 1885us; 1886us; 1889us; 1891us; 1893us; 1895us; 1897us; 1898us; 1900us; 1902us; 1904us; 1905us; 1907us; 1909us; 1911us; 1912us; 1914us; 1916us; 1918us; 1919us; 1921us; 1923us; 1925us; 1926us; 1928us; 1930us; 1932us; 1933us; 1935us; 1937us; 1939us; 1940us; 1942us; 1944us; 1945us; 1947us; 1949us; 1950us; 1952us; 1954us; 1955us; 1957us; 1959us; 1961us; 1962us; 1963us; 1964us; 1965us; 1967us; 1969us; 1971us; 1972us; 1973us; 1975us; 1976us; 1978us; 1980us; 1982us; 1983us; 1985us; 1987us; 1989us; 1990us; 1992us; 1995us; 1997us; 1998us; 1999us; 2001us; 2005us; 2007us; 2008us; 2010us; 2011us; 2013us; 2014us; 2016us; 2017us; 2018us; 2020us; 2021us; 2023us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 0us; 2us; 0us; 2us; 1us; 1us; 4us; 4us; 0us; 5us; 5us; 6us; 2us; 1us; 1us; 2us; 4us; 1us; 1us; 1us; 1us; 1us; 0us; 2us; 0us; 1us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 5us; 1us; 5us; 1us; 5us; 5us; 5us; 8us; 4us; 2us; 1us; 3us; 2us; 2us; 3us; 3us; 3us; 2us; 1us; 5us; 1us; 5us; 1us; 2us; 1us; 2us; 8us; 4us; 0us; 2us; 0us; 2us; 1us; 5us; 2us; 1us; 3us; 2us; 2us; 1us; 5us; 6us; 0us; 5us; 1us; 5us; 6us; 1us; 5us; 1us; 5us; 6us; 4us; 1us; 6us; 5us; 5us; 1us; 2us; 2us; 5us; 6us; 5us; 5us; 1us; 2us; 2us; 4us; 5us; 2us; 2us; 2us; 5us; 5us; 5us; 5us; 5us; 6us; 5us; 4us; 4us; 4us; 4us; 5us; 4us; 1us; 4us; 5us; 4us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 0us; 1us; 5us; 1us; 1us; 0us; 1us; 1us; 6us; 6us; 6us; 5us; 5us; 5us; 5us; 5us; 5us; 4us; 4us; 5us; 5us; 1us; 1us; 1us; 5us; 1us; 0us; 2us; 5us; 5us; 5us; 4us; 4us; 0us; 2us; 2us; 2us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; 9us; 9us; 9us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 23us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 24us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 29us; 29us; 30us; 31us; 31us; 32us; 33us; 33us; 33us; 33us; 33us; 34us; 34us; 35us; 35us; 36us; 36us; 37us; 37us; 38us; 38us; 38us; 39us; 39us; 40us; 40us; 41us; 42us; 43us; 43us; 43us; 43us; 43us; 44us; 44us; 44us; 45us; 45us; 46us; 46us; 46us; 47us; 47us; 48us; 48us; 48us; 49us; 49us; 50us; 50us; 51us; 52us; 52us; 52us; 52us; 53us; 53us; 54us; 55us; 55us; 55us; 55us; 56us; 57us; 57us; 57us; 58us; 58us; 58us; 58us; 58us; 59us; 60us; 61us; 61us; 61us; 61us; 62us; 63us; 64us; 65us; 65us; 66us; 67us; 67us; 68us; 68us; 68us; 68us; 68us; 68us; 68us; 68us; 68us; 68us; 69us; 69us; 70us; 71us; 72us; 73us; 73us; 74us; 74us; 74us; 75us; 75us; 76us; 76us; 76us; 76us; 76us; 76us; 76us; 76us; 76us; 77us; 77us; 77us; 77us; 77us; 78us; 78us; 79us; 79us; 79us; 79us; 80us; 81us; 81us; 82us; 82us; 83us; 84us; 84us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 49152us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16391us; 16392us; 16393us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 16399us; 65535us; 16400us; 16401us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 65535us; 16411us; 16413us; 16414us; 16416us; 16418us; 16420us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 65535us; 16429us; 65535us; 16430us; 65535us; 65535us; 16431us; 16432us; 65535us; 16433us; 16434us; 16435us; 65535us; 16436us; 65535us; 16437us; 65535us; 16438us; 65535us; 16439us; 65535us; 16440us; 65535us; 65535us; 16441us; 65535us; 65535us; 16442us; 16443us; 16444us; 65535us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 65535us; 16451us; 65535us; 16452us; 16453us; 65535us; 65535us; 65535us; 65535us; 16454us; 16455us; 65535us; 65535us; 65535us; 65535us; 16456us; 16457us; 65535us; 65535us; 65535us; 65535us; 16458us; 65535us; 65535us; 65535us; 65535us; 16459us; 65535us; 65535us; 65535us; 65535us; 16460us; 65535us; 65535us; 65535us; 65535us; 16461us; 65535us; 65535us; 65535us; 65535us; 16462us; 65535us; 16463us; 16464us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16465us; 65535us; 16466us; 65535us; 16467us; 65535us; 65535us; 16468us; 65535us; 65535us; 16469us; 65535us; 65535us; 16470us; 65535us; 16471us; 16472us; 65535us; 65535us; 65535us; 16473us; 16474us; 65535us; 65535us; 65535us; 16475us; 16476us; 65535us; 16477us; 16478us; 65535us; 16479us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16480us; 65535us; 16483us; 65535us; 16485us; 16486us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16487us; 65535us; 16488us; 16489us; 65535us; 65535us; 16490us; 16491us; 65535us; 16492us; 16493us; 65535us; 65535us; 65535us; 65535us; 16494us; 65535us; 65535us; 65535us; 16495us; 65535us; 65535us; 65535us; 65535us; 16497us; 16498us; 65535us; 65535us; 65535us; 16499us; 65535us; 65535us; 65535us; 16500us; 16501us; 65535us; 65535us; 65535us; 16502us; 16503us; 65535us; 65535us; 65535us; 16504us; 65535us; 65535us; 65535us; 16505us; 65535us; 65535us; 16506us; 16507us; 65535us; 65535us; 65535us; 65535us; 16508us; 65535us; 65535us; 16509us; 65535us; 65535us; 65535us; 16510us; 16511us; 65535us; 16512us; 65535us; 16513us; 65535us; 65535us; 65535us; 65535us; 16514us; 65535us; 65535us; 65535us; 16515us; 65535us; 16516us; 65535us; 65535us; 65535us; 16517us; 16518us; 65535us; 16519us; 65535us; 16520us; 65535us; 65535us; 16521us; 65535us; 65535us; 65535us; 16522us; 65535us; 16523us; 65535us; 16524us; 65535us; 16525us; 65535us; 65535us; 65535us; 65535us; 16526us; 65535us; 16527us; 65535us; 65535us; 65535us; 16528us; 65535us; 65535us; 65535us; 16529us; 65535us; 65535us; 65535us; 16530us; 65535us; 65535us; 65535us; 65535us; 16531us; 65535us; 65535us; 65535us; 65535us; 16532us; 65535us; 65535us; 65535us; 16533us; 65535us; 65535us; 16534us; 65535us; 65535us; 16535us; 65535us; 65535us; 16536us; 65535us; 65535us; 65535us; 16537us; 65535us; 65535us; 16538us; 16539us; 65535us; 65535us; 16540us; 65535us; 65535us; 16541us; 65535us; 65535us; 16542us; 16544us; 65535us; 16545us; 65535us; 16546us; 65535us; 16547us; 65535us; 16548us; 65535us; 16549us; 65535us; 16550us; 65535us; 16551us; 65535us; 16552us; 65535us; 16553us; 65535us; 16554us; 16556us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16557us; 16558us; 16559us; 16561us; 16562us; 65535us; 16563us; 65535us; 16564us; 65535us; 65535us; 65535us; 65535us; 65535us; 16565us; 65535us; 65535us; 65535us; 16566us; 65535us; 65535us; 65535us; 16567us; 65535us; 65535us; 65535us; 16568us; 65535us; 65535us; 65535us; 16569us; 65535us; 65535us; 65535us; 16570us; 65535us; 65535us; 65535us; 16571us; 65535us; 65535us; 16572us; 65535us; 65535us; 16573us; 65535us; 65535us; 16574us; 65535us; 65535us; 65535us; 16575us; 16576us; 16577us; 16578us; 65535us; 65535us; 65535us; 16579us; 16580us; 65535us; 16582us; 65535us; 65535us; 65535us; 16583us; 65535us; 65535us; 65535us; 16584us; 65535us; 65535us; 65535us; 16585us; 16586us; 65535us; 65535us; 65535us; 16587us; 65535us; 16589us; 65535us; 16590us; 65535us; 16591us; 16592us; 65535us; 16593us; 65535us; 16594us; |]
let _fsyacc_reductions ()  =    [| 
# 972 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Script.script)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startscript));
# 981 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Script.script)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startscript1));
# 990 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Script.var option * Script.definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startmodule1));
# 999 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "..\..\text\parser.fsy"
                                  name _1 (at ()) 
                   )
# 211 "..\..\text\parser.fsy"
                 : 'name));
# 1010 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "..\..\text\parser.fsy"
                                       "" 
                   )
# 214 "..\..\text\parser.fsy"
                 : 'string_list));
# 1020 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "..\..\text\parser.fsy"
                                              _1 ^ _2 
                   )
# 215 "..\..\text\parser.fsy"
                 : 'string_list));
# 1032 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "..\..\text\parser.fsy"
                                       [] 
                   )
# 221 "..\..\text\parser.fsy"
                 : 'value_type_list));
# 1042 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "..\..\text\parser.fsy"
                                                      _1 :: _2 
                   )
# 222 "..\..\text\parser.fsy"
                 : 'value_type_list));
# 1054 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "..\..\text\parser.fsy"
                                   AnyFuncType 
                   )
# 225 "..\..\text\parser.fsy"
                 : 'elem_type));
# 1064 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "..\..\text\parser.fsy"
                                      GlobalType (_1, Immutable) 
                   )
# 228 "..\..\text\parser.fsy"
                 : 'global_type));
# 1075 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "..\..\text\parser.fsy"
                                                    GlobalType (_3, Mutable) 
                   )
# 229 "..\..\text\parser.fsy"
                 : 'global_type));
# 1086 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "..\..\text\parser.fsy"
                                                   _3 
                   )
# 232 "..\..\text\parser.fsy"
                 : 'func_type));
# 1097 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "..\..\text\parser.fsy"
                           FuncType ([], []) 
                   )
# 236 "..\..\text\parser.fsy"
                 : 'func_sig));
# 1107 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _5 in
                           if ins <> [] then error (at ()) "result before parameter";
                           FuncType (ins, _3 @ out) 
                   )
# 238 "..\..\text\parser.fsy"
                 : 'func_sig));
# 1121 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _5 in FuncType (_3 @ ins, out) 
                   )
# 242 "..\..\text\parser.fsy"
                 : 'func_sig));
# 1133 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _6 in FuncType (_4 :: ins, out) 
                   )
# 244 "..\..\text\parser.fsy"
                 : 'func_sig));
# 1146 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limits)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'elem_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "..\..\text\parser.fsy"
                                            TableType (_1, _2) 
                   )
# 247 "..\..\text\parser.fsy"
                 : 'table_sig));
# 1158 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'limits)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "..\..\text\parser.fsy"
                                  MemoryType _1 
                   )
# 250 "..\..\text\parser.fsy"
                 : 'memory_sig));
# 1169 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "..\..\text\parser.fsy"
                               {min = nat32 _1 (ati 1); max = None} 
                   )
# 253 "..\..\text\parser.fsy"
                 : 'limits));
# 1180 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "..\..\text\parser.fsy"
                                   {min = nat32 _1 (ati 1); max = Some (nat32 _2 (ati 2))} 
                   )
# 254 "..\..\text\parser.fsy"
                 : 'limits));
# 1192 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "..\..\text\parser.fsy"
                                              _3 
                   )
# 257 "..\..\text\parser.fsy"
                 : 'type_use));
# 1203 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "..\..\text\parser.fsy"
                               _1 @@ at () 
                   )
# 263 "..\..\text\parser.fsy"
                 : 'literal));
# 1214 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "..\..\text\parser.fsy"
                               _1 @@ at () 
                   )
# 264 "..\..\text\parser.fsy"
                 : 'literal));
# 1225 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "..\..\text\parser.fsy"
                                 _1 @@ at () 
                   )
# 265 "..\..\text\parser.fsy"
                 : 'literal));
# 1236 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "..\..\text\parser.fsy"
                               let at = at () in fun c lookup -> nat32 _1 at @@ at 
                   )
# 268 "..\..\text\parser.fsy"
                 : 'var));
# 1247 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "..\..\text\parser.fsy"
                               let at = at () in fun c lookup -> lookup c (_1 @@ at) @@ at 
                   )
# 269 "..\..\text\parser.fsy"
                 : 'var));
# 1258 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "..\..\text\parser.fsy"
                                       fun c lookup -> [] 
                   )
# 272 "..\..\text\parser.fsy"
                 : 'var_list));
# 1268 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "..\..\text\parser.fsy"
                                        fun c lookup -> _1 c lookup :: _2 c lookup 
                   )
# 273 "..\..\text\parser.fsy"
                 : 'var_list));
# 1280 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "..\..\text\parser.fsy"
                                       fun c anon bind -> anon c 
                   )
# 276 "..\..\text\parser.fsy"
                 : 'bind_var_opt));
# 1290 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "..\..\text\parser.fsy"
                                    fun c anon bind -> bind c _1 
                   )
# 277 "..\..\text\parser.fsy"
                 : 'bind_var_opt));
# 1301 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "..\..\text\parser.fsy"
                               _1 @@ at () 
                   )
# 280 "..\..\text\parser.fsy"
                 : 'bind_var));
# 1312 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "..\..\text\parser.fsy"
                           fun c xs ->
                           List.iter (fun x -> error x.at "mismatching label") xs;
                           anon_label c 
                   )
# 284 "..\..\text\parser.fsy"
                 : 'labeling_opt));
# 1324 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "..\..\text\parser.fsy"
                           fun c xs ->
                           List.iter
                             (fun x -> if x.it <> _1.it then error x.at "mismatching label") xs;
                           bind_label c _1 
                   )
# 288 "..\..\text\parser.fsy"
                 : 'labeling_opt));
# 1338 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "..\..\text\parser.fsy"
                                                 [] 
                   )
# 294 "..\..\text\parser.fsy"
                 : 'labeling_end_opt));
# 1348 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "..\..\text\parser.fsy"
                                    [_1] 
                   )
# 295 "..\..\text\parser.fsy"
                 : 'labeling_end_opt));
# 1359 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "..\..\text\parser.fsy"
                                       0l 
                   )
# 298 "..\..\text\parser.fsy"
                 : 'offset_opt));
# 1369 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "..\..\text\parser.fsy"
                                         nat32 _1 (at ()) 
                   )
# 299 "..\..\text\parser.fsy"
                 : 'offset_opt));
# 1380 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "..\..\text\parser.fsy"
                                       None 
                   )
# 302 "..\..\text\parser.fsy"
                 : 'align_opt));
# 1390 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "..\..\text\parser.fsy"
                           let n = nat _1 (at ()) in
                           if not (Lib.Int.is_power_of_two n) then
                             error (at ()) "alignment must be a power of two";
                           Some (Lib.Int.log2 n) 
                   )
# 304 "..\..\text\parser.fsy"
                 : 'align_opt));
# 1404 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plain_instr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "..\..\text\parser.fsy"
                                       let at = at () in fun c -> [_1 c @@ at] 
                   )
# 313 "..\..\text\parser.fsy"
                 : 'instr));
# 1415 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "..\..\text\parser.fsy"
                                      fun c -> let e, es = _1 c in e :: es 
                   )
# 314 "..\..\text\parser.fsy"
                 : 'instr));
# 1426 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_instr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "..\..\text\parser.fsy"
                                       let at = at () in fun c -> [_1 c @@ at] 
                   )
# 315 "..\..\text\parser.fsy"
                 : 'instr));
# 1437 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "..\..\text\parser.fsy"
                                _1 
                   )
# 316 "..\..\text\parser.fsy"
                 : 'instr));
# 1448 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "..\..\text\parser.fsy"
                                       fun c -> unreachable 
                   )
# 319 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1458 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "..\..\text\parser.fsy"
                               fun c -> nop 
                   )
# 320 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1468 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "..\..\text\parser.fsy"
                                  fun c -> br (_2 c label) 
                   )
# 321 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1479 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "..\..\text\parser.fsy"
                                     fun c -> br_if (_2 c label) 
                   )
# 322 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1490 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "..\..\text\parser.fsy"
                           fun c -> let xs, x = Lib.List.split_last (_2 c label :: _3 c label) in
                                    br_table xs x 
                   )
# 324 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1503 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "..\..\text\parser.fsy"
                                  fun c -> ``return`` 
                   )
# 326 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1513 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "..\..\text\parser.fsy"
                                    fun c -> call (_2 c func) 
                   )
# 327 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1524 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "..\..\text\parser.fsy"
                                fun c -> drop 
                   )
# 328 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1534 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "..\..\text\parser.fsy"
                                  fun c -> select 
                   )
# 329 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1544 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "..\..\text\parser.fsy"
                                         fun c -> get_local (_2 c local) 
                   )
# 330 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1555 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "..\..\text\parser.fsy"
                                         fun c -> set_local (_2 c local) 
                   )
# 331 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1566 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 332 "..\..\text\parser.fsy"
                                         fun c -> tee_local (_2 c local) 
                   )
# 332 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1577 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "..\..\text\parser.fsy"
                                          fun c -> get_global (_2 c ``global``) 
                   )
# 333 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1588 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 334 "..\..\text\parser.fsy"
                                          fun c -> set_global (_2 c ``global``) 
                   )
# 334 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1599 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : LOADToken)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'align_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "..\..\text\parser.fsy"
                                                     fun c -> _1 _3 _2 
                   )
# 335 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1612 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SAVEToken)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'align_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "..\..\text\parser.fsy"
                                                      fun c -> _1 _3 _2 
                   )
# 336 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1625 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "..\..\text\parser.fsy"
                                          fun c -> current_memory 
                   )
# 337 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1635 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "..\..\text\parser.fsy"
                                       fun c -> grow_memory 
                   )
# 338 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1645 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CONSTtoken)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "..\..\text\parser.fsy"
                                         fun c -> fst (literal _1 _2) 
                   )
# 339 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1657 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.instr')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "..\..\text\parser.fsy"
                                fun c -> _1 
                   )
# 340 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1668 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.instr')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "..\..\text\parser.fsy"
                                   fun c -> _1 
                   )
# 341 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1679 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.instr')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 342 "..\..\text\parser.fsy"
                                 fun c -> _1 
                   )
# 342 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1690 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.instr')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 343 "..\..\text\parser.fsy"
                                  fun c -> _1 
                   )
# 343 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1701 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.instr')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "..\..\text\parser.fsy"
                                   fun c -> _1 
                   )
# 344 "..\..\text\parser.fsy"
                 : 'plain_instr));
# 1712 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "..\..\text\parser.fsy"
                           let at1 = ati 1 in
                           fun c -> let x, es = _2 c in call_indirect x @@ at1, es 
                   )
# 348 "..\..\text\parser.fsy"
                 : 'call_instr));
# 1724 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_use)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "..\..\text\parser.fsy"
                           let at1 = ati 1 in
                           fun c ->
                           match _2 c with
                           | FuncType ([], []), es -> _1 c type_, es
                           | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es 
                   )
# 353 "..\..\text\parser.fsy"
                 : 'call_instr_sig));
# 1740 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "..\..\text\parser.fsy"
                           let at1 = ati 1 in
                           fun c -> let ft, es = _1 c in inline_type c ft at1, es 
                   )
# 359 "..\..\text\parser.fsy"
                 : 'call_instr_sig));
# 1752 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "..\..\text\parser.fsy"
                           fun c ->
                           let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es 
                   )
# 364 "..\..\text\parser.fsy"
                 : 'call_instr_params));
# 1765 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_results)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "..\..\text\parser.fsy"
                           fun c -> let ts, es = _1 c in FuncType ([], ts), es 
                   )
# 367 "..\..\text\parser.fsy"
                 : 'call_instr_params));
# 1776 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_instr_results)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 371 "..\..\text\parser.fsy"
                           fun c -> let ts, es = _5 c in _3 @ ts, es 
                   )
# 371 "..\..\text\parser.fsy"
                 : 'call_instr_results));
# 1788 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "..\..\text\parser.fsy"
                           fun c -> [], _1 c 
                   )
# 373 "..\..\text\parser.fsy"
                 : 'call_instr_results));
# 1799 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_end_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 377 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c _5 in let ts, es = _3 c' in block ts es 
                   )
# 377 "..\..\text\parser.fsy"
                 : 'block_instr));
# 1812 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_end_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c _5 in let ts, es = _3 c' in loop ts es 
                   )
# 379 "..\..\text\parser.fsy"
                 : 'block_instr));
# 1825 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_end_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 381 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c _5 in let ts, es = _3 c' in if_ ts es [] 
                   )
# 381 "..\..\text\parser.fsy"
                 : 'block_instr));
# 1838 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_end_opt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_end_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c (_5 @ _8) in
                           let ts, es1 = _3 c' in if_ ts es1 (_6 c') 
                   )
# 383 "..\..\text\parser.fsy"
                 : 'block_instr));
# 1854 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "..\..\text\parser.fsy"
                                                       [_3] 
                   )
# 387 "..\..\text\parser.fsy"
                 : 'block_sig));
# 1865 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_sig)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 391 "..\..\text\parser.fsy"
                           fun c -> _1, _2 c 
                   )
# 391 "..\..\text\parser.fsy"
                 : 'block));
# 1877 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "..\..\text\parser.fsy"
                                      fun c -> [], _1 c 
                   )
# 392 "..\..\text\parser.fsy"
                 : 'block));
# 1888 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 396 "..\..\text\parser.fsy"
                           let at = at () in fun c -> let es, e' = _2 c in es @ [e' @@ at] 
                   )
# 396 "..\..\text\parser.fsy"
                 : 'expr));
# 1899 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'plain_instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "..\..\text\parser.fsy"
                                                 fun c -> _2 c, _1 c 
                   )
# 399 "..\..\text\parser.fsy"
                 : 'expr1));
# 1911 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 401 "..\..\text\parser.fsy"
                           fun c -> let x, es = _2 c in es, call_indirect x 
                   )
# 401 "..\..\text\parser.fsy"
                 : 'expr1));
# 1922 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 403 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], block ts es 
                   )
# 403 "..\..\text\parser.fsy"
                 : 'expr1));
# 1934 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 405 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], loop ts es 
                   )
# 405 "..\..\text\parser.fsy"
                 : 'expr1));
# 1946 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'labeling_opt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 407 "..\..\text\parser.fsy"
                           fun c -> let c' = _2 c [] in
                           let ts, (es, es1, es2) = _3 c c' in es, if_ ts es1 es2 
                   )
# 407 "..\..\text\parser.fsy"
                 : 'expr1));
# 1959 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_use)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 412 "..\..\text\parser.fsy"
                           let at1 = ati 1 in
                           fun c ->
                           match _2 c with
                           | FuncType ([], []), es -> _1 c type_, es
                           | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es 
                   )
# 412 "..\..\text\parser.fsy"
                 : 'call_expr_sig));
# 1975 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 418 "..\..\text\parser.fsy"
                           let at1 = ati 1 in
                           fun c -> let ft, es = _1 c in inline_type c ft at1, es 
                   )
# 418 "..\..\text\parser.fsy"
                 : 'call_expr_sig));
# 1987 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 423 "..\..\text\parser.fsy"
                           fun c ->
                           let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es 
                   )
# 423 "..\..\text\parser.fsy"
                 : 'call_expr_params));
# 2000 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_results)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "..\..\text\parser.fsy"
                           fun c -> let ts, es = _1 c in FuncType ([], ts), es 
                   )
# 426 "..\..\text\parser.fsy"
                 : 'call_expr_params));
# 2011 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'call_expr_results)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 430 "..\..\text\parser.fsy"
                           fun c -> let ts, es = _5 c in _3 @ ts, es 
                   )
# 430 "..\..\text\parser.fsy"
                 : 'call_expr_results));
# 2023 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 432 "..\..\text\parser.fsy"
                           fun c -> [], _1 c 
                   )
# 432 "..\..\text\parser.fsy"
                 : 'call_expr_results));
# 2034 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_sig)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 436 "..\..\text\parser.fsy"
                                              fun c c' -> let ts, ess = _2 c c' in _1 @ ts, ess 
                   )
# 436 "..\..\text\parser.fsy"
                 : 'if_block));
# 2046 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 437 "..\..\text\parser.fsy"
                               fun c c' -> [], _1 c c' 
                   )
# 437 "..\..\text\parser.fsy"
                 : 'if_block));
# 2057 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 441 "..\..\text\parser.fsy"
                           fun c c' -> let es = _1 c in let es0, es1, es2 = _2 c c' in
                           es @ es0, es1, es2 
                   )
# 441 "..\..\text\parser.fsy"
                 : 'if_));
# 2070 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 444 "..\..\text\parser.fsy"
                           fun c c' -> [], _3 c', _7 c' 
                   )
# 444 "..\..\text\parser.fsy"
                 : 'if_));
# 2082 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 446 "..\..\text\parser.fsy"
                           fun c c' -> [], _3 c', [] 
                   )
# 446 "..\..\text\parser.fsy"
                 : 'if_));
# 2093 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 449 "..\..\text\parser.fsy"
                                       fun c -> [] 
                   )
# 449 "..\..\text\parser.fsy"
                 : 'instr_list));
# 2103 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 450 "..\..\text\parser.fsy"
                                            fun c -> _1 c @ _2 c 
                   )
# 450 "..\..\text\parser.fsy"
                 : 'instr_list));
# 2115 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 453 "..\..\text\parser.fsy"
                                       fun c -> [] 
                   )
# 453 "..\..\text\parser.fsy"
                 : 'expr_list));
# 2125 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 454 "..\..\text\parser.fsy"
                                          fun c -> _1 c @ _2 c 
                   )
# 454 "..\..\text\parser.fsy"
                 : 'expr_list));
# 2137 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 457 "..\..\text\parser.fsy"
                                      let at = at () in fun c -> _1 c @@ at 
                   )
# 457 "..\..\text\parser.fsy"
                 : 'const_expr));
# 2148 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 464 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> let x = _3 c anon_func bind_func @@ at in fun () -> _4 c x at 
                   )
# 464 "..\..\text\parser.fsy"
                 : 'func));
# 2161 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_use)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 469 "..\..\text\parser.fsy"
                           fun c x at ->
                           let t = inline_type_explicit c (_1 c type_) (fst _2) at in
                           [{(snd _2 (enter_func c)) with ftype = t} @@ at], [], [] 
                   )
# 469 "..\..\text\parser.fsy"
                 : 'func_fields));
# 2175 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 473 "..\..\text\parser.fsy"
                           fun c x at ->
                           let t = inline_type c (fst _1) at in
                           [{(snd _1 (enter_func c)) with ftype = t} @@ at], [], [] 
                   )
# 473 "..\..\text\parser.fsy"
                 : 'func_fields));
# 2188 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_use)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 477 "..\..\text\parser.fsy"
                           fun c x at ->
                           let t = inline_type_explicit c (_2 c type_) _3 at in
                           [],
                           [{ module_name = fst _1; item_name = snd _1;
                              idesc = FuncImport t @@ at } @@ at ], [] 
                   )
# 477 "..\..\text\parser.fsy"
                 : 'func_fields));
# 2205 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 483 "..\..\text\parser.fsy"
                           fun c x at ->
                           let t = inline_type c _2 at in
                           [],
                           [{ module_name = fst _1; item_name = snd _1;
                              idesc = FuncImport t @@ at } @@ at ], [] 
                   )
# 483 "..\..\text\parser.fsy"
                 : 'func_fields));
# 2221 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_export)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 489 "..\..\text\parser.fsy"
                           fun c x at ->
                           let fns, ims, exs = _2 c x at in fns, ims, _1 (FuncExport x) c :: exs 
                   )
# 489 "..\..\text\parser.fsy"
                 : 'func_fields));
# 2234 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import_result)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 493 "..\..\text\parser.fsy"
                                                     _1 
                   )
# 493 "..\..\text\parser.fsy"
                 : 'func_fields_import));
# 2245 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 495 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _5 in FuncType (_3 @ ins, out) 
                   )
# 495 "..\..\text\parser.fsy"
                 : 'func_fields_import));
# 2257 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 497 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _6 in FuncType (_4 :: ins, out) 
                   )
# 497 "..\..\text\parser.fsy"
                 : 'func_fields_import));
# 2270 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 500 "..\..\text\parser.fsy"
                                       FuncType ([], []) 
                   )
# 500 "..\..\text\parser.fsy"
                 : 'func_fields_import_result));
# 2280 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_import_result)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 502 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = _5 in FuncType (ins, _3 @ out) 
                   )
# 502 "..\..\text\parser.fsy"
                 : 'func_fields_import_result));
# 2292 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_result_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 505 "..\..\text\parser.fsy"
                                            _1 
                   )
# 505 "..\..\text\parser.fsy"
                 : 'func_fields_body));
# 2303 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 507 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = fst _5 in
                           FuncType (_3 @ ins, out),
                           fun c -> ignore (anon_locals c _3); snd _5 c 
                   )
# 507 "..\..\text\parser.fsy"
                 : 'func_fields_body));
# 2317 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_fields_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 511 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = fst _6 in
                           FuncType (_4 :: ins, out),
                           fun c -> ignore (bind_local c _3); snd _6 c 
                   )
# 511 "..\..\text\parser.fsy"
                 : 'func_fields_body));
# 2332 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 516 "..\..\text\parser.fsy"
                                     FuncType ([], []), _1 
                   )
# 516 "..\..\text\parser.fsy"
                 : 'func_result_body));
# 2343 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_result_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 518 "..\..\text\parser.fsy"
                           let (FuncType (ins, out)) = fst _5 in
                           FuncType (ins, _3 @ out), snd _5 
                   )
# 518 "..\..\text\parser.fsy"
                 : 'func_result_body));
# 2356 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'instr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 523 "..\..\text\parser.fsy"
                           fun c -> let c' = anon_label c in
                           {ftype = -1l @@ at(); locals = []; body = _1 c'} 
                   )
# 523 "..\..\text\parser.fsy"
                 : 'func_body));
# 2368 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value_type_list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 526 "..\..\text\parser.fsy"
                           fun c -> ignore (anon_locals c _3); let f = _5 c in
                           {f with locals = _3 @ f.locals} 
                   )
# 526 "..\..\text\parser.fsy"
                 : 'func_body));
# 2381 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Types.value_type)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 529 "..\..\text\parser.fsy"
                           fun c -> ignore (bind_local c _3); let f = _6 c in
                           {f with locals = _4 :: f.locals} 
                   )
# 529 "..\..\text\parser.fsy"
                 : 'func_body));
# 2395 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 536 "..\..\text\parser.fsy"
                                                       _3 
                   )
# 536 "..\..\text\parser.fsy"
                 : 'offset));
# 2406 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 537 "..\..\text\parser.fsy"
                                let at = at () in fun c -> _1 c @@ at 
                   )
# 537 "..\..\text\parser.fsy"
                 : 'offset));
# 2417 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 541 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> {index = _3 c table; offset = _4 c; init = _5 c func} @@ at 
                   )
# 541 "..\..\text\parser.fsy"
                 : 'elem));
# 2431 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 544 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> {index = 0l @@ at; offset = _3 c; init = _4 c func} @@ at 
                   )
# 544 "..\..\text\parser.fsy"
                 : 'elem));
# 2444 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 549 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> let x = _3 c anon_table bind_table @@ at in
                           fun () -> _4 c x at 
                   )
# 549 "..\..\text\parser.fsy"
                 : 'table));
# 2458 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 555 "..\..\text\parser.fsy"
                           fun c x at -> [{ttype = _1} @@ at], [], [], [] 
                   )
# 555 "..\..\text\parser.fsy"
                 : 'table_fields));
# 2469 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 557 "..\..\text\parser.fsy"
                           fun c x at ->
                           [], [],
                           [{ module_name = fst _1; item_name = snd _1;
                             idesc = TableImport _2 @@ at } @@ at], [] 
                   )
# 557 "..\..\text\parser.fsy"
                 : 'table_fields));
# 2484 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_export)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 562 "..\..\text\parser.fsy"
                           fun c x at -> let tabs, elems, ims, exs = _2 c x at in
                           tabs, elems, ims, _1 (TableExport x) c :: exs 
                   )
# 562 "..\..\text\parser.fsy"
                 : 'table_fields));
# 2497 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elem_type)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 565 "..\..\text\parser.fsy"
                           fun c x at ->
                           let init = _4 c func in let size = Int32.of_int (List.length init) in
                           [{ttype = TableType ({min = size; max = Some size}, _1)} @@ at],
                           [{index = x; offset = [i32_const (0l @@ at) @@ at] @@ at; init = init} @@ at],
                           [], [] 
                   )
# 565 "..\..\text\parser.fsy"
                 : 'table_fields));
# 2513 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 573 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> {index = _3 c memory; offset = _4 c; init = _5} @@ at 
                   )
# 573 "..\..\text\parser.fsy"
                 : 'data));
# 2527 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'offset)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 576 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> {index = 0l @@ at; offset = _3 c; init = _4} @@ at 
                   )
# 576 "..\..\text\parser.fsy"
                 : 'data));
# 2540 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 581 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> let x = _3 c anon_memory bind_memory @@ at in
                           fun () -> _4 c x at 
                   )
# 581 "..\..\text\parser.fsy"
                 : 'memory));
# 2554 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 587 "..\..\text\parser.fsy"
                           fun c x at -> [{mtype = _1} @@ at], [], [], [] 
                   )
# 587 "..\..\text\parser.fsy"
                 : 'memory_fields));
# 2565 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 589 "..\..\text\parser.fsy"
                           fun c x at ->
                           [], [],
                           [{ module_name = fst _1; item_name = snd _1;
                              idesc = MemoryImport _2 @@ at } @@ at], [] 
                   )
# 589 "..\..\text\parser.fsy"
                 : 'memory_fields));
# 2580 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_export)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 594 "..\..\text\parser.fsy"
                           fun c x at -> let mems, data, ims, exs = _2 c x at in
                           mems, data, ims, _1 (MemoryExport x) c :: exs 
                   )
# 594 "..\..\text\parser.fsy"
                 : 'memory_fields));
# 2593 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 597 "..\..\text\parser.fsy"
                           fun c x at ->
                           let size = (Int32.div (Int32.add (Int32.of_int (String.length _3)) 65535l) 65536l) in
                           [{mtype = MemoryType {min = size; max = Some size}} @@ at],
                           [{index = x;
                             offset = [i32_const (0l @@ at) @@ at] @@ at; init = _3} @@ at],
                           [], [] 
                   )
# 597 "..\..\text\parser.fsy"
                 : 'memory_fields));
# 2609 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 606 "..\..\text\parser.fsy"
                           let at = at () in
                           fun c -> let x = _3 c anon_global bind_global @@ at in
                           fun () -> _4 c x at 
                   )
# 606 "..\..\text\parser.fsy"
                 : 'global_));
# 2623 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 612 "..\..\text\parser.fsy"
                           fun c x at -> [{gtype = _1; value = _2 c} @@ at], [], [] 
                   )
# 612 "..\..\text\parser.fsy"
                 : 'global_fields));
# 2635 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 614 "..\..\text\parser.fsy"
                           fun c x at ->
                           [],
                           [{ module_name = fst _1; item_name = snd _1;
                              idesc = GlobalImport _2 @@ at } @@ at], [] 
                   )
# 614 "..\..\text\parser.fsy"
                 : 'global_fields));
# 2650 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_export)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 619 "..\..\text\parser.fsy"
                           fun c x at -> let globs, ims, exs = _2 c x at in
                           globs, ims, _1 (GlobalExport x) c :: exs 
                   )
# 619 "..\..\text\parser.fsy"
                 : 'global_fields));
# 2663 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_use)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 627 "..\..\text\parser.fsy"
                           fun c -> ignore (_3 c anon_func bind_func);
                           fun () -> FuncImport (_4 c type_) 
                   )
# 627 "..\..\text\parser.fsy"
                 : 'import_desc));
# 2676 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 630 "..\..\text\parser.fsy"
                           let at4 = ati 4 in
                           fun c -> ignore (_3 c anon_func bind_func);
                           fun () -> FuncImport (inline_type c _4 at4) 
                   )
# 630 "..\..\text\parser.fsy"
                 : 'import_desc));
# 2690 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'table_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 634 "..\..\text\parser.fsy"
                           fun c -> ignore (_3 c anon_table bind_table);
                           fun () -> TableImport _4 
                   )
# 634 "..\..\text\parser.fsy"
                 : 'import_desc));
# 2703 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory_sig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 637 "..\..\text\parser.fsy"
                           fun c -> ignore (_3 c anon_memory bind_memory);
                           fun () -> MemoryImport _4 
                   )
# 637 "..\..\text\parser.fsy"
                 : 'import_desc));
# 2716 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 640 "..\..\text\parser.fsy"
                           fun c -> ignore (_3 c anon_global bind_global);
                           fun () -> GlobalImport _4 
                   )
# 640 "..\..\text\parser.fsy"
                 : 'import_desc));
# 2729 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'import_desc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 645 "..\..\text\parser.fsy"
                           let at = at () in
                     	  let at5 = ati 5 in
                           fun c -> let df = _5 c in
                           fun () -> {module_name = _3; item_name = _4; idesc = df () @@ at5} @@ at 
                   )
# 645 "..\..\text\parser.fsy"
                 : 'import));
# 2745 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 651 "..\..\text\parser.fsy"
                                                      _3, _4 
                   )
# 651 "..\..\text\parser.fsy"
                 : 'inline_import));
# 2757 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 654 "..\..\text\parser.fsy"
                                              fun c -> FuncExport (_3 c func) 
                   )
# 654 "..\..\text\parser.fsy"
                 : 'export_desc));
# 2768 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 655 "..\..\text\parser.fsy"
                                               fun c -> TableExport (_3 c table) 
                   )
# 655 "..\..\text\parser.fsy"
                 : 'export_desc));
# 2779 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 656 "..\..\text\parser.fsy"
                                                fun c -> MemoryExport (_3 c memory) 
                   )
# 656 "..\..\text\parser.fsy"
                 : 'export_desc));
# 2790 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 657 "..\..\text\parser.fsy"
                                                fun c -> GlobalExport (_3 c ``global``) 
                   )
# 657 "..\..\text\parser.fsy"
                 : 'export_desc));
# 2801 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'export_desc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 661 "..\..\text\parser.fsy"
                           let at = at () in
                     	  let at4 = ati 4 in
                           fun c -> {name = _3; edesc = _4 c @@ at4} @@ at 
                   )
# 661 "..\..\text\parser.fsy"
                 : 'export));
# 2815 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 667 "..\..\text\parser.fsy"
                           let at = at () in fun d c -> {name = _3; edesc = d @@ at} @@ at 
                   )
# 667 "..\..\text\parser.fsy"
                 : 'inline_export));
# 2826 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 673 "..\..\text\parser.fsy"
                                     _1 @@ at () 
                   )
# 673 "..\..\text\parser.fsy"
                 : 'type_));
# 2837 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 677 "..\..\text\parser.fsy"
                           fun c -> anon_type c _3 
                   )
# 677 "..\..\text\parser.fsy"
                 : 'type_def));
# 2848 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'bind_var)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 679 "..\..\text\parser.fsy"
                           fun c -> bind_type c _3 _4 
                   )
# 679 "..\..\text\parser.fsy"
                 : 'type_def));
# 2860 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'var)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 683 "..\..\text\parser.fsy"
                           fun c -> _3 c func 
                   )
# 683 "..\..\text\parser.fsy"
                 : 'start));
# 2871 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 687 "..\..\text\parser.fsy"
                           fun (c : context) () -> {empty_module with types = c.types.list} 
                   )
# 687 "..\..\text\parser.fsy"
                 : 'module_fields));
# 2881 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 688 "..\..\text\parser.fsy"
                                          _1 
                   )
# 688 "..\..\text\parser.fsy"
                 : 'module_fields));
# 2892 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'type_def)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 692 "..\..\text\parser.fsy"
                           fun c -> ignore (_1 c); _2 c 
                   )
# 692 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2904 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'global_)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 694 "..\..\text\parser.fsy"
                           fun c -> let gf = _1 c in let mf = _2 c in
                           fun () -> let globs, ims, exs = gf () in let m = mf () in
                           if globs <> [] && m.imports <> [] then
                             error (List.hd m.imports).at "import after global definition";
                           { m with globals = globs @ m.globals;
                             imports = ims @ m.imports; exports = exs @ m.exports } 
                   )
# 694 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2921 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'table)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 701 "..\..\text\parser.fsy"
                           fun c -> let tf = _1 c in let mf = _2 c in
                           fun () -> let tabs, elems, ims, exs = tf () in let m = mf () in
                           if tabs <> [] && m.imports <> [] then
                             error (List.hd m.imports).at "import after table definition";
                           { m with tables = tabs @ m.tables; elems = elems @ m.elems;
                             imports = ims @ m.imports; exports = exs @ m.exports } 
                   )
# 701 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2938 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'memory)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 708 "..\..\text\parser.fsy"
                           fun c -> let mmf = _1 c in let mf = _2 c in
                           fun () -> let mems, data, ims, exs = mmf () in let m = mf () in
                           if mems <> [] && m.imports <> [] then
                             error (List.hd m.imports).at "import after memory definition";
                           { m with memories = mems @ m.memories; data = data @ m.data;
                             imports = ims @ m.imports; exports = exs @ m.exports } 
                   )
# 708 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2955 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'func)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 715 "..\..\text\parser.fsy"
                           fun c -> let ff = _1 c in let mf = _2 c in
                           fun () -> let funcs, ims, exs = ff () in let m = mf () in
                           if funcs <> [] && m.imports <> [] then
                             error (List.hd m.imports).at "import after function definition";
                           { m with funcs = funcs @ m.funcs;
                             imports = ims @ m.imports; exports = exs @ m.exports } 
                   )
# 715 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2972 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'elem)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 722 "..\..\text\parser.fsy"
                           fun c -> let mf = _2 c in
                           fun () -> let m = mf () in
                           {m with elems = _1 c :: m.elems} 
                   )
# 722 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 2986 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'data)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 726 "..\..\text\parser.fsy"
                           fun c -> let mf = _2 c in
                           fun () -> let m = mf () in
                           {m with data = _1 c :: m.data} 
                   )
# 726 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 3000 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'start)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 730 "..\..\text\parser.fsy"
                           fun c -> let mf = _2 c in
                           fun () -> let m = mf () in let x = _1 c in
                           match m.start with
                           | Some _ -> error x.at "multiple start sections"
                           | None -> {m with start = Some x} 
                   )
# 730 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 3016 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'import)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 736 "..\..\text\parser.fsy"
                           fun c -> let imf = _1 c in let mf = _2 c in
                           fun () -> let im = imf () in let m = mf () in
                           {m with imports = im :: m.imports} 
                   )
# 736 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 3030 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'export)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 740 "..\..\text\parser.fsy"
                           fun c -> let mf = _2 c in
                           fun () -> let m = mf () in
                           {m with exports = _1 c :: m.exports} 
                   )
# 740 "..\..\text\parser.fsy"
                 : 'module_fields1));
# 3044 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 745 "..\..\text\parser.fsy"
                                       None 
                   )
# 745 "..\..\text\parser.fsy"
                 : 'module_var_opt));
# 3054 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 746 "..\..\text\parser.fsy"
                               Some (_1 @@ at ()) 
                   )
# 746 "..\..\text\parser.fsy"
                 : 'module_var_opt));
# 3065 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 750 "..\..\text\parser.fsy"
                           _3, Textual (_4 (empty_context ()) () @@ at ()) @@ at () 
                   )
# 750 "..\..\text\parser.fsy"
                 : 'module_));
# 3077 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 753 "..\..\text\parser.fsy"
                                         Textual (_1 (empty_context ()) () @@ at ()) @@ at () 
                   )
# 753 "..\..\text\parser.fsy"
                 : 'inline_module));
# 3088 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_fields1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 756 "..\..\text\parser.fsy"
                                          Textual (_1 (empty_context ()) () @@ at ()) @@ at () 
                   )
# 756 "..\..\text\parser.fsy"
                 : 'inline_module1));
# 3099 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 762 "..\..\text\parser.fsy"
                                       None 
                   )
# 762 "..\..\text\parser.fsy"
                 : 'script_var_opt));
# 3109 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 763 "..\..\text\parser.fsy"
                               Some (_1 @@ at ()) 
                   )
# 763 "..\..\text\parser.fsy"
                 : 'script_var_opt));
# 3120 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 766 "..\..\text\parser.fsy"
                                   _1 
                   )
# 766 "..\..\text\parser.fsy"
                 : 'script_module));
# 3131 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 768 "..\..\text\parser.fsy"
                           _3, Encoded ("binary", _5) @@ at() 
                   )
# 768 "..\..\text\parser.fsy"
                 : 'script_module));
# 3143 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 770 "..\..\text\parser.fsy"
                           _3, Quoted ("quote", _5) @@ at() 
                   )
# 770 "..\..\text\parser.fsy"
                 : 'script_module));
# 3155 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 774 "..\..\text\parser.fsy"
                           Invoke (_3, _4, _5) @@ at () 
                   )
# 774 "..\..\text\parser.fsy"
                 : 'action));
# 3168 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 776 "..\..\text\parser.fsy"
                           Get (_3, _4) @@ at() 
                   )
# 776 "..\..\text\parser.fsy"
                 : 'action));
# 3180 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_module)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 780 "..\..\text\parser.fsy"
                           AssertMalformed (snd _3, _4) @@ at () 
                   )
# 780 "..\..\text\parser.fsy"
                 : 'assertion));
# 3192 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_module)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 782 "..\..\text\parser.fsy"
                           AssertInvalid (snd _3, _4) @@ at () 
                   )
# 782 "..\..\text\parser.fsy"
                 : 'assertion));
# 3204 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_module)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 784 "..\..\text\parser.fsy"
                           AssertUnlinkable (snd _3, _4) @@ at () 
                   )
# 784 "..\..\text\parser.fsy"
                 : 'assertion));
# 3216 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_module)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 786 "..\..\text\parser.fsy"
                           AssertUninstantiable (snd _3, _4) @@ at () 
                   )
# 786 "..\..\text\parser.fsy"
                 : 'assertion));
# 3228 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 787 "..\..\text\parser.fsy"
                                                                     AssertReturn (_3, _4) @@ at () 
                   )
# 787 "..\..\text\parser.fsy"
                 : 'assertion));
# 3240 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 788 "..\..\text\parser.fsy"
                                                                        AssertReturnCanonicalNaN _3 @@ at () 
                   )
# 788 "..\..\text\parser.fsy"
                 : 'assertion));
# 3251 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 789 "..\..\text\parser.fsy"
                                                                         AssertReturnArithmeticNaN _3 @@ at () 
                   )
# 789 "..\..\text\parser.fsy"
                 : 'assertion));
# 3262 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 790 "..\..\text\parser.fsy"
                                                               AssertTrap (_3, _4) @@ at () 
                   )
# 790 "..\..\text\parser.fsy"
                 : 'assertion));
# 3274 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 791 "..\..\text\parser.fsy"
                                                                     AssertExhaustion (_3, _4) @@ at () 
                   )
# 791 "..\..\text\parser.fsy"
                 : 'assertion));
# 3286 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'action)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 794 "..\..\text\parser.fsy"
                                  Action _1 @@ at () 
                   )
# 794 "..\..\text\parser.fsy"
                 : 'cmd));
# 3297 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'assertion)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 795 "..\..\text\parser.fsy"
                                     Assertion _1 @@ at () 
                   )
# 795 "..\..\text\parser.fsy"
                 : 'cmd));
# 3308 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_module)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 796 "..\..\text\parser.fsy"
                                         Module (fst _1, snd _1) @@ at () 
                   )
# 796 "..\..\text\parser.fsy"
                 : 'cmd));
# 3319 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_var_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 797 "..\..\text\parser.fsy"
                                                                  Register (_3, _4) @@ at () 
                   )
# 797 "..\..\text\parser.fsy"
                 : 'cmd));
# 3331 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'meta)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 798 "..\..\text\parser.fsy"
                                Meta _1 @@ at () 
                   )
# 798 "..\..\text\parser.fsy"
                 : 'cmd));
# 3342 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 801 "..\..\text\parser.fsy"
                                       [] 
                   )
# 801 "..\..\text\parser.fsy"
                 : 'cmd_list));
# 3352 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cmd)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'cmd_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 802 "..\..\text\parser.fsy"
                                        _1 :: _2 
                   )
# 802 "..\..\text\parser.fsy"
                 : 'cmd_list));
# 3364 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'cmd_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 805 "..\..\text\parser.fsy"
                                                                    Script (_3, _4) @@ at () 
                   )
# 805 "..\..\text\parser.fsy"
                 : 'meta));
# 3376 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 806 "..\..\text\parser.fsy"
                                                                 Input (_3, _4) @@ at () 
                   )
# 806 "..\..\text\parser.fsy"
                 : 'meta));
# 3388 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_var_opt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 807 "..\..\text\parser.fsy"
                                                                  Output (_3, Some _4) @@ at () 
                   )
# 807 "..\..\text\parser.fsy"
                 : 'meta));
# 3400 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'script_var_opt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 808 "..\..\text\parser.fsy"
                                                           Output (_3, None) @@ at () 
                   )
# 808 "..\..\text\parser.fsy"
                 : 'meta));
# 3411 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : CONSTtoken)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 811 "..\..\text\parser.fsy"
                                                   snd (literal _2 _3) @@ ati 3 
                   )
# 811 "..\..\text\parser.fsy"
                 : 'const_));
# 3423 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 814 "..\..\text\parser.fsy"
                                       [] 
                   )
# 814 "..\..\text\parser.fsy"
                 : 'const_list));
# 3433 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'const_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 815 "..\..\text\parser.fsy"
                                             _1 :: _2 
                   )
# 815 "..\..\text\parser.fsy"
                 : 'const_list));
# 3445 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cmd_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 818 "..\..\text\parser.fsy"
                                        _1 
                   )
# 818 "..\..\text\parser.fsy"
                 : Script.script));
# 3456 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_module1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 819 "..\..\text\parser.fsy"
                                              [Module (None, _1) @@ at ()] 
                   )
# 819 "..\..\text\parser.fsy"
                 : Script.script));
# 3467 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 822 "..\..\text\parser.fsy"
                               [_1] 
                   )
# 822 "..\..\text\parser.fsy"
                 : Script.script));
# 3478 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 825 "..\..\text\parser.fsy"
                                       _1 
                   )
# 825 "..\..\text\parser.fsy"
                 : Script.var option * Script.definition));
# 3489 "Parser.ml"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'inline_module)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 826 "..\..\text\parser.fsy"
                                             None, _1 
                   )
# 826 "..\..\text\parser.fsy"
                 : Script.var option * Script.definition));
|]
# 3501 "Parser.ml"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 79;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let script lexer lexbuf : Script.script =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let script1 lexer lexbuf : Script.script =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let module1 lexer lexbuf : Script.var option * Script.definition =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
